/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ProductCreateCycleRequest;
import com.konfigthis.client.model.ProductCreateCycleRequestAddonPlanInputModelsInner;
import com.konfigthis.client.model.ProductCreateCycleRequestAllowancePlanInputModelInner;
import com.konfigthis.client.model.ProductCreateCycleRequestCyclesInputModelInner;
import com.konfigthis.client.model.ProductCreateCycleResponseInner;
import com.konfigthis.client.model.ProductCreateNewProductRequest;
import com.konfigthis.client.model.ProductCreateNewProductResponse;
import com.konfigthis.client.model.ProductCreatePlanRequest;
import com.konfigthis.client.model.ProductCreatePlanResponse;
import com.konfigthis.client.model.ProductGetDetailsResponse;
import com.konfigthis.client.model.ProductListPlansResponseInner;
import com.konfigthis.client.model.ProductListProductsResponse;
import com.konfigthis.client.model.ProductUpdatePlanAndCycleRequest;
import com.konfigthis.client.model.ProductUpdatePlanAndCycleRequestCycles;
import com.konfigthis.client.model.ProductUpdatePlanOrderRequest;
import com.konfigthis.client.model.ProductUpdateProductRequest;
import com.konfigthis.client.model.ProductUpdateProductRequestOrderedCustomFields;
import com.konfigthis.client.model.ProductUpdateProductRequestProductCountryLimitations;
import com.konfigthis.client.model.ProductUpdateProductResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Disabled
public class ProductApiTest {

    private static ProductApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProductApi(apiClient);
    }

    /**
     * Create a cycle
     *
     * Create a cycle for a specific plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCycleTest() throws ApiException {
        List<ProductCreateCycleRequestCyclesInputModelInner> cyclesInputModel = null;
        List<ProductCreateCycleRequestAddonPlanInputModelsInner> addonPlanInputModels = null;
        String companyDomain = null;
        Integer productId = null;
        Integer planId = null;
        List<ProductCreateCycleRequestAllowancePlanInputModelInner> allowancePlanInputModel = null;
        List<ProductCreateCycleResponseInner> response = api.createCycle(cyclesInputModel, addonPlanInputModels, companyDomain, productId, planId)
                .allowancePlanInputModel(allowancePlanInputModel)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a product
     *
     * Create a new product for your company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewProductTest() throws ApiException {
        String companyDomain = null;
        String description = null;
        String name = null;
        Integer visibility = null;
        String billingCurrency = null;
        String displayName = null;
        Boolean isShippingAddressRequired = null;
        Boolean isShippingAddressValidationRequired = null;
        Boolean isBillingAddressValidationRequired = null;
        Boolean isAdditionalEmailRequired = null;
        Boolean isPhoneNumberRequired = null;
        Boolean isMarketingConsentRequired = null;
        String alertEmail = null;
        ProductUpdateProductRequestOrderedCustomFields orderedCustomFields = null;
        Integer typeOfProduct = null;
        ProductUpdateProductRequestProductCountryLimitations productCountryLimitation = null;
        Boolean isAnyCountryAllowed = null;
        ProductCreateNewProductResponse response = api.createNewProduct(companyDomain)
                .description(description)
                .name(name)
                .visibility(visibility)
                .billingCurrency(billingCurrency)
                .displayName(displayName)
                .isShippingAddressRequired(isShippingAddressRequired)
                .isShippingAddressValidationRequired(isShippingAddressValidationRequired)
                .isBillingAddressValidationRequired(isBillingAddressValidationRequired)
                .isAdditionalEmailRequired(isAdditionalEmailRequired)
                .isPhoneNumberRequired(isPhoneNumberRequired)
                .isMarketingConsentRequired(isMarketingConsentRequired)
                .alertEmail(alertEmail)
                .orderedCustomFields(orderedCustomFields)
                .typeOfProduct(typeOfProduct)
                .productCountryLimitation(productCountryLimitation)
                .isAnyCountryAllowed(isAnyCountryAllowed)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a plan
     *
     * Create a new plan for a specific product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlanTest() throws ApiException {
        String companyDomain = null;
        Integer productId = null;
        String description = null;
        String name = null;
        String displayName = null;
        Integer pricingModel = null;
        String featureTags = null;
        Integer visibility = null;
        String redirectUrl = null;
        String alertEmail = null;
        ProductCreatePlanResponse response = api.createPlan(companyDomain, productId)
                .description(description)
                .name(name)
                .displayName(displayName)
                .pricingModel(pricingModel)
                .featureTags(featureTags)
                .visibility(visibility)
                .redirectUrl(redirectUrl)
                .alertEmail(alertEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Product details
     *
     * Get the details of a specific product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String companyDomain = null;
        Integer productId = null;
        ProductGetDetailsResponse response = api.getDetails(companyDomain, productId)
                .execute();
        // TODO: test validations
    }

    /**
     * List plans
     *
     * Get a list of plans associated with a specific product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPlansTest() throws ApiException {
        String companyDomain = null;
        Integer productId = null;
        List<ProductListPlansResponseInner> response = api.listPlans(companyDomain, productId)
                .execute();
        // TODO: test validations
    }

    /**
     * List products
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProductsTest() throws ApiException {
        String companyDomain = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Integer visibilityType = null;
        ProductListProductsResponse response = api.listProducts(companyDomain, page, pageSize)
                .search(search)
                .visibilityType(visibilityType)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a plan and cycle
     *
     * Update a plan and cycle for your company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlanAndCycleTest() throws ApiException {
        String companyDomain = null;
        Integer productId = null;
        Integer planId = null;
        String description = null;
        String name = null;
        String displayName = null;
        String featureTags = null;
        Integer visibility = null;
        ProductUpdatePlanAndCycleRequestCycles cycles = null;
        String redirectUrl = null;
        String alertEmail = null;
        String response = api.updatePlanAndCycle(companyDomain, productId, planId)
                .description(description)
                .name(name)
                .displayName(displayName)
                .featureTags(featureTags)
                .visibility(visibility)
                .cycles(cycles)
                .redirectUrl(redirectUrl)
                .alertEmail(alertEmail)
                .execute();
        // TODO: test validations
    }

    /**
     * Update plan order
     *
     * Change the order in which your plans displayed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlanOrderTest() throws ApiException {
        String companyDomain = null;
        String productId = null;
        List<Integer> orderedPlanIds = null;
        String response = api.updatePlanOrder(companyDomain, productId)
                .orderedPlanIds(orderedPlanIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a product
     *
     * Update product for your company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProductTest() throws ApiException {
        String companyDomain = null;
        Integer productID = null;
        String name = null;
        Integer visibility = null;
        String billingCurrency = null;
        String displayName = null;
        String decription = null;
        Boolean isShippingAddressRequired = null;
        Boolean isShippingAddressValidationRequired = null;
        Boolean isBillingAddressValidationRequired = null;
        Boolean isAdditionalEmailRequired = null;
        Boolean isPhoneNumberRequired = null;
        Boolean isMarketingConsentRequired = null;
        String alertEmail = null;
        ProductUpdateProductRequestOrderedCustomFields orderedCustomFields = null;
        Integer typeOfProduct = null;
        ProductUpdateProductRequestProductCountryLimitations productCountryLimitations = null;
        ProductUpdateProductResponse response = api.updateProduct(companyDomain, productID)
                .name(name)
                .visibility(visibility)
                .billingCurrency(billingCurrency)
                .displayName(displayName)
                .decription(decription)
                .isShippingAddressRequired(isShippingAddressRequired)
                .isShippingAddressValidationRequired(isShippingAddressValidationRequired)
                .isBillingAddressValidationRequired(isBillingAddressValidationRequired)
                .isAdditionalEmailRequired(isAdditionalEmailRequired)
                .isPhoneNumberRequired(isPhoneNumberRequired)
                .isMarketingConsentRequired(isMarketingConsentRequired)
                .alertEmail(alertEmail)
                .orderedCustomFields(orderedCustomFields)
                .typeOfProduct(typeOfProduct)
                .productCountryLimitations(productCountryLimitations)
                .execute();
        // TODO: test validations
    }

}

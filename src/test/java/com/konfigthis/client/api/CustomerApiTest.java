/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequest;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestAddress;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerResponse;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequest;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequestAddress;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequestCardDetails;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequestShippingAddress;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionResponse;
import com.konfigthis.client.model.CustomerCreateWithoutSubscriptionRequest;
import com.konfigthis.client.model.CustomerCreateWithoutSubscriptionRequestCardDetails;
import com.konfigthis.client.model.CustomerCreateWithoutSubscriptionResponse;
import com.konfigthis.client.model.CustomerGetCreditNotesResponseInner;
import com.konfigthis.client.model.CustomerGetDetailsResponse;
import com.konfigthis.client.model.CustomerGetSubscriptionsByUniqueIdResponseInner;
import com.konfigthis.client.model.CustomerUpdateCustomFieldResponseRequest;
import com.konfigthis.client.model.CustomerUpdateCustomFieldResponseResponseInner;
import com.konfigthis.client.model.CustomerUpdateDetailsRequest;
import com.konfigthis.client.model.CustomerUpdateDetailsRequestBillingAddress;
import com.konfigthis.client.model.CustomerUpdateDetailsResponse;
import com.konfigthis.client.model.CustomerUpdatePaymentCardTokenRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerApi
 */
@Disabled
public class CustomerApiTest {

    private static CustomerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CustomerApi(apiClient);
    }

    /**
     * Add subscription to existing customer
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSubscriptionToExistingCustomerTest() throws ApiException {
        Integer cycleId = null;
        String companyDomain = null;
        String customerUniqueId = null;
        Integer units = null;
        CustomerAddSubscriptionToExistingCustomerRequestAddress address = null;
        Object shippingAddress = null;
        String additionalEmail = null;
        String phoneNumberDialCountry = null;
        Integer phoneNumberDialCode = null;
        Integer phoneNumber = null;
        Boolean marketingConsent = null;
        String taxRegNumber = null;
        String ipAddress = null;
        List<CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner> customFieldResponse = null;
        List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns = null;
        Integer allowances = null;
        List<CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner> couponCodes = null;
        CustomerAddSubscriptionToExistingCustomerResponse response = api.addSubscriptionToExistingCustomer(cycleId, companyDomain, customerUniqueId)
                .units(units)
                .address(address)
                .shippingAddress(shippingAddress)
                .additionalEmail(additionalEmail)
                .phoneNumberDialCountry(phoneNumberDialCountry)
                .phoneNumberDialCode(phoneNumberDialCode)
                .phoneNumber(phoneNumber)
                .marketingConsent(marketingConsent)
                .taxRegNumber(taxRegNumber)
                .ipAddress(ipAddress)
                .customFieldResponse(customFieldResponse)
                .addOns(addOns)
                .allowances(allowances)
                .couponCodes(couponCodes)
                .execute();
        // TODO: test validations
    }

    /**
     * Clear customer data (GDPR)
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearGdprDataTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        String response = api.clearGdprData(companyDomain, customerUniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create new customer and subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewCustomerAndSubscriptionTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String email = null;
        Integer cycleId = null;
        Integer units = null;
        CustomerCreateNewCustomerAndSubscriptionRequestAddress address = null;
        CustomerCreateNewCustomerAndSubscriptionRequestCardDetails cardDetails = null;
        String companyDomain = null;
        CustomerCreateNewCustomerAndSubscriptionRequestShippingAddress shippingAddress = null;
        String additionalEmail = null;
        String phoneNumberDialCountry = null;
        Integer phoneNumberDialCode = null;
        Integer phoneNumber = null;
        Boolean marketingConsent = null;
        List<CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner> customFieldResponse = null;
        List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns = null;
        List<Integer> allowances = null;
        List<CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner> couponCodes = null;
        CustomerCreateNewCustomerAndSubscriptionResponse response = api.createNewCustomerAndSubscription(firstName, lastName, email, cycleId, units, address, cardDetails, companyDomain)
                .shippingAddress(shippingAddress)
                .additionalEmail(additionalEmail)
                .phoneNumberDialCountry(phoneNumberDialCountry)
                .phoneNumberDialCode(phoneNumberDialCode)
                .phoneNumber(phoneNumber)
                .marketingConsent(marketingConsent)
                .customFieldResponse(customFieldResponse)
                .addOns(addOns)
                .allowances(allowances)
                .couponCodes(couponCodes)
                .execute();
        // TODO: test validations
    }

    /**
     * Create without subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWithoutSubscriptionTest() throws ApiException {
        String addressLine1 = null;
        String city = null;
        String state = null;
        String country = null;
        String postCode = null;
        String firstName = null;
        String lastName = null;
        String email = null;
        String companyDomain = null;
        String addressLine2 = null;
        CustomerCreateWithoutSubscriptionRequestCardDetails cardDetails = null;
        CustomerCreateWithoutSubscriptionResponse response = api.createWithoutSubscription(addressLine1, city, state, country, postCode, firstName, lastName, email, companyDomain)
                .addressLine2(addressLine2)
                .cardDetails(cardDetails)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a customer
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        String response = api.deleteById(companyDomain, customerUniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * Customer credit notes
     *
     * This query gets individual customer&#39;s credit notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreditNotesTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        List<CustomerGetCreditNotesResponseInner> response = api.getCreditNotes(companyDomain, customerUniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * Customer details
     *
     * This query gets individual customer details using the unique identifier provided in the Billsby platform
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailsTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        CustomerGetDetailsResponse response = api.getDetails(companyDomain, customerUniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * Customer feature tags
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeatureTagsTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        List<String> response = api.getFeatureTags(companyDomain, customerUniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * Customer subscriptions
     *
     * This query gets individual customer&#39;s subscriptions using the unique identifier provided in the Billsby platform
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionsByUniqueIdTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        List<CustomerGetSubscriptionsByUniqueIdResponseInner> response = api.getSubscriptionsByUniqueId(companyDomain, customerUniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * List customers
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomersTest() throws ApiException {
        String companyDomain = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String response = api.listCustomers(companyDomain, page, pageSize)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Update customer response to custom fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFieldResponseTest() throws ApiException {
        String value = null;
        String companyDomain = null;
        Integer customFieldResponseId = null;
        List<CustomerUpdateCustomFieldResponseResponseInner> response = api.updateCustomFieldResponse(value, companyDomain, customFieldResponseId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update customer
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetailsTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String email = null;
        CustomerUpdateDetailsRequestBillingAddress billingAddress = null;
        String companyDomain = null;
        String customerUniqueId = null;
        String phoneNumberDialCountry = null;
        String phoneNumberDialCode = null;
        String phoneNumber = null;
        CustomerUpdateDetailsResponse response = api.updateDetails(firstName, lastName, email, billingAddress, companyDomain, customerUniqueId)
                .phoneNumberDialCountry(phoneNumberDialCountry)
                .phoneNumberDialCode(phoneNumberDialCode)
                .phoneNumber(phoneNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Update payment card token
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentCardTokenTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        String fullName = null;
        String paymentCardtoken = null;
        Integer expiryMonth = null;
        Integer expiryYear = null;
        String cardType = null;
        String last4Digits = null;
        String response = api.updatePaymentCardToken(companyDomain, customerUniqueId)
                .fullName(fullName)
                .paymentCardtoken(paymentCardtoken)
                .expiryMonth(expiryMonth)
                .expiryYear(expiryYear)
                .cardType(cardType)
                .last4Digits(last4Digits)
                .execute();
        // TODO: test validations
    }

    /**
     * Request to update payment details
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentDetailsRequestTest() throws ApiException {
        String companyDomain = null;
        String customerUniqueId = null;
        String response = api.updatePaymentDetailsRequest(companyDomain, customerUniqueId)
                .execute();
        // TODO: test validations
    }

}

/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CustomFieldCreateNewFieldRequest;
import com.konfigthis.client.model.CustomFieldGetResponseResponseInner;
import com.konfigthis.client.model.CustomFieldListResponseInner;
import com.konfigthis.client.model.CustomFieldUpdateFieldRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomFieldApi
 */
@Disabled
public class CustomFieldApiTest {

    private static CustomFieldApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CustomFieldApi(apiClient);
    }

    /**
     * Create custom field
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewFieldTest() throws ApiException {
        String description = null;
        Integer type = null;
        String label = null;
        Boolean compulsory = null;
        String companyDomain = null;
        String options = null;
        String response = api.createNewField(description, type, label, compulsory, companyDomain)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom fields response
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResponseTest() throws ApiException {
        String companyDomain = null;
        Integer productId = null;
        String customerUniqueId = null;
        List<CustomFieldGetResponseResponseInner> response = api.getResponse(companyDomain)
                .productId(productId)
                .customerUniqueId(customerUniqueId)
                .execute();
        // TODO: test validations
    }

    /**
     * Custom fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String companyDomain = null;
        List<CustomFieldListResponseInner> response = api.list(companyDomain)
                .execute();
        // TODO: test validations
    }

    /**
     * Update custom field
     *
     * Update an existing custom field
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldTest() throws ApiException {
        String companyDomain = null;
        String customFieldId = null;
        String description = null;
        String label = null;
        String options = null;
        Boolean compulsory = null;
        String response = api.updateField(companyDomain, customFieldId)
                .description(description)
                .label(label)
                .options(options)
                .compulsory(compulsory)
                .execute();
        // TODO: test validations
    }

}

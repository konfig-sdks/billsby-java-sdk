/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner;
import java.time.LocalDate;
import com.konfigthis.client.model.SubscriptionAddFeatureTagsRequest;
import com.konfigthis.client.model.SubscriptionChangePlanRequest;
import com.konfigthis.client.model.SubscriptionFeatureTagsSplitResponse;
import com.konfigthis.client.model.SubscriptionGetCountersValueResponse;
import com.konfigthis.client.model.SubscriptionGetEventLogsResponse;
import com.konfigthis.client.model.SubscriptionGetShippingAddressResponse;
import com.konfigthis.client.model.SubscriptionListSubscriptionsResponse;
import com.konfigthis.client.model.SubscriptionUpdateCounterRequest;
import com.konfigthis.client.model.SubscriptionUpdateRenewalDateRequest;
import com.konfigthis.client.model.SubscriptionUpdateShippingAddressRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"ApiKey\" is required but no API key was provided. Please set \"ApiKey\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFeatureTagsCall(String companyDomain, SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionAddFeatureTagsRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/tags"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFeatureTagsValidateBeforeCall(String companyDomain, SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addFeatureTags(Async)");
        }

        return addFeatureTagsCall(companyDomain, subscriptionAddFeatureTagsRequest, _callback);

    }


    private ApiResponse<String> addFeatureTagsWithHttpInfo(String companyDomain, SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = addFeatureTagsValidateBeforeCall(companyDomain, subscriptionAddFeatureTagsRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFeatureTagsAsync(String companyDomain, SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFeatureTagsValidateBeforeCall(companyDomain, subscriptionAddFeatureTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFeatureTagsRequestBuilder {
        private final String companyDomain;
        private List<String> subscriptionUniqueIds;
        private List<String> tagNames;

        private AddFeatureTagsRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set subscriptionUniqueIds
         * @param subscriptionUniqueIds Add subscription IDs of all the subscriptions you want to add the feature tags to. (optional)
         * @return AddFeatureTagsRequestBuilder
         */
        public AddFeatureTagsRequestBuilder subscriptionUniqueIds(List<String> subscriptionUniqueIds) {
            this.subscriptionUniqueIds = subscriptionUniqueIds;
            return this;
        }
        
        /**
         * Set tagNames
         * @param tagNames The name of the feature tags you want to add (optional)
         * @return AddFeatureTagsRequestBuilder
         */
        public AddFeatureTagsRequestBuilder tagNames(List<String> tagNames) {
            this.tagNames = tagNames;
            return this;
        }
        
        /**
         * Build call for addFeatureTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest = buildBodyParams();
            return addFeatureTagsCall(companyDomain, subscriptionAddFeatureTagsRequest, _callback);
        }

        private SubscriptionAddFeatureTagsRequest buildBodyParams() {
            SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest = new SubscriptionAddFeatureTagsRequest();
            subscriptionAddFeatureTagsRequest.subscriptionUniqueIds(this.subscriptionUniqueIds);
            subscriptionAddFeatureTagsRequest.tagNames(this.tagNames);
            return subscriptionAddFeatureTagsRequest;
        }

        /**
         * Execute addFeatureTags request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest = buildBodyParams();
            ApiResponse<String> localVarResp = addFeatureTagsWithHttpInfo(companyDomain, subscriptionAddFeatureTagsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFeatureTags request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest = buildBodyParams();
            return addFeatureTagsWithHttpInfo(companyDomain, subscriptionAddFeatureTagsRequest);
        }

        /**
         * Execute addFeatureTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            SubscriptionAddFeatureTagsRequest subscriptionAddFeatureTagsRequest = buildBodyParams();
            return addFeatureTagsAsync(companyDomain, subscriptionAddFeatureTagsRequest, _callback);
        }
    }

    /**
     * Add feature tags
     * You can add feature tags to existing subscriptions using the unique subscription IDs
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return AddFeatureTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddFeatureTagsRequestBuilder addFeatureTags(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new AddFeatureTagsRequestBuilder(companyDomain);
    }
    private okhttp3.Call cancelSubscriptionCall(String companyDomain, String subscriptionUniqueId, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerUniqueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerUniqueId", customerUniqueId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSubscriptionValidateBeforeCall(String companyDomain, String subscriptionUniqueId, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling cancelSubscription(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling cancelSubscription(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling cancelSubscription(Async)");
        }

        return cancelSubscriptionCall(companyDomain, subscriptionUniqueId, customerUniqueId, _callback);

    }


    private ApiResponse<String> cancelSubscriptionWithHttpInfo(String companyDomain, String subscriptionUniqueId, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = cancelSubscriptionValidateBeforeCall(companyDomain, subscriptionUniqueId, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelSubscriptionAsync(String companyDomain, String subscriptionUniqueId, String customerUniqueId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSubscriptionValidateBeforeCall(companyDomain, subscriptionUniqueId, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelSubscriptionRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;
        private final String customerUniqueId;

        private CancelSubscriptionRequestBuilder(String companyDomain, String subscriptionUniqueId, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for cancelSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelSubscriptionCall(companyDomain, subscriptionUniqueId, customerUniqueId, _callback);
        }


        /**
         * Execute cancelSubscription request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = cancelSubscriptionWithHttpInfo(companyDomain, subscriptionUniqueId, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelSubscription request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return cancelSubscriptionWithHttpInfo(companyDomain, subscriptionUniqueId, customerUniqueId);
        }

        /**
         * Execute cancelSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return cancelSubscriptionAsync(companyDomain, subscriptionUniqueId, customerUniqueId, _callback);
        }
    }

    /**
     * Cancel a subscription
     * Cancel an individual subscription using the unique identifier of the subscription in the Billsby platform
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return CancelSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CancelSubscriptionRequestBuilder cancelSubscription(String companyDomain, String subscriptionUniqueId, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new CancelSubscriptionRequestBuilder(companyDomain, subscriptionUniqueId, customerUniqueId);
    }
    private okhttp3.Call changePlanCall(String companyDomain, String subscriptionUniqueId, SubscriptionChangePlanRequest subscriptionChangePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionChangePlanRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}/plan"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePlanValidateBeforeCall(String companyDomain, String subscriptionUniqueId, SubscriptionChangePlanRequest subscriptionChangePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling changePlan(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling changePlan(Async)");
        }

        return changePlanCall(companyDomain, subscriptionUniqueId, subscriptionChangePlanRequest, _callback);

    }


    private ApiResponse<String> changePlanWithHttpInfo(String companyDomain, String subscriptionUniqueId, SubscriptionChangePlanRequest subscriptionChangePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = changePlanValidateBeforeCall(companyDomain, subscriptionUniqueId, subscriptionChangePlanRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call changePlanAsync(String companyDomain, String subscriptionUniqueId, SubscriptionChangePlanRequest subscriptionChangePlanRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePlanValidateBeforeCall(companyDomain, subscriptionUniqueId, subscriptionChangePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChangePlanRequestBuilder {
        private final Integer planId;
        private final Integer cycleId;
        private final String customerUniqueId;
        private final String companyDomain;
        private final String subscriptionUniqueId;
        private Integer planChangeType;
        private Integer units;
        private List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns;
        private List<Integer> allowances;
        private Boolean issueRefund;

        private ChangePlanRequestBuilder(Integer planId, Integer cycleId, String customerUniqueId, String companyDomain, String subscriptionUniqueId) {
            this.planId = planId;
            this.cycleId = cycleId;
            this.customerUniqueId = customerUniqueId;
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
        }

        /**
         * Set planChangeType
         * @param planChangeType Immediate &#x3D; 1 OnRenewal &#x3D; 2 (optional, default to 1)
         * @return ChangePlanRequestBuilder
         */
        public ChangePlanRequestBuilder planChangeType(Integer planChangeType) {
            this.planChangeType = planChangeType;
            return this;
        }
        
        /**
         * Set units
         * @param units The number of units required (for cycles with mulitple units allowed) (optional)
         * @return ChangePlanRequestBuilder
         */
        public ChangePlanRequestBuilder units(Integer units) {
            this.units = units;
            return this;
        }
        
        /**
         * Set addOns
         * @param addOns  (optional)
         * @return ChangePlanRequestBuilder
         */
        public ChangePlanRequestBuilder addOns(List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns) {
            this.addOns = addOns;
            return this;
        }
        
        /**
         * Set allowances
         * @param allowances  (optional)
         * @return ChangePlanRequestBuilder
         */
        public ChangePlanRequestBuilder allowances(List<Integer> allowances) {
            this.allowances = allowances;
            return this;
        }
        
        /**
         * Set issueRefund
         * @param issueRefund In case of immediate change, this will apply a refund into the first invoice of the new plan based on the prorated amount of the current plan (optional, default to false)
         * @return ChangePlanRequestBuilder
         */
        public ChangePlanRequestBuilder issueRefund(Boolean issueRefund) {
            this.issueRefund = issueRefund;
            return this;
        }
        
        /**
         * Build call for changePlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionChangePlanRequest subscriptionChangePlanRequest = buildBodyParams();
            return changePlanCall(companyDomain, subscriptionUniqueId, subscriptionChangePlanRequest, _callback);
        }

        private SubscriptionChangePlanRequest buildBodyParams() {
            SubscriptionChangePlanRequest subscriptionChangePlanRequest = new SubscriptionChangePlanRequest();
            subscriptionChangePlanRequest.planId(this.planId);
            subscriptionChangePlanRequest.cycleId(this.cycleId);
            subscriptionChangePlanRequest.customerUniqueId(this.customerUniqueId);
            subscriptionChangePlanRequest.planChangeType(this.planChangeType);
            subscriptionChangePlanRequest.units(this.units);
            subscriptionChangePlanRequest.addOns(this.addOns);
            subscriptionChangePlanRequest.allowances(this.allowances);
            subscriptionChangePlanRequest.issueRefund(this.issueRefund);
            return subscriptionChangePlanRequest;
        }

        /**
         * Execute changePlan request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            SubscriptionChangePlanRequest subscriptionChangePlanRequest = buildBodyParams();
            ApiResponse<String> localVarResp = changePlanWithHttpInfo(companyDomain, subscriptionUniqueId, subscriptionChangePlanRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute changePlan request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            SubscriptionChangePlanRequest subscriptionChangePlanRequest = buildBodyParams();
            return changePlanWithHttpInfo(companyDomain, subscriptionUniqueId, subscriptionChangePlanRequest);
        }

        /**
         * Execute changePlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            SubscriptionChangePlanRequest subscriptionChangePlanRequest = buildBodyParams();
            return changePlanAsync(companyDomain, subscriptionUniqueId, subscriptionChangePlanRequest, _callback);
        }
    }

    /**
     * Change plan
     * Change the plan that a subscription sits on
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @return ChangePlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ChangePlanRequestBuilder changePlan(Integer planId, Integer cycleId, String customerUniqueId, String companyDomain, String subscriptionUniqueId) throws IllegalArgumentException {
        if (planId == null) throw new IllegalArgumentException("\"planId\" is required but got null");
        if (cycleId == null) throw new IllegalArgumentException("\"cycleId\" is required but got null");
        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        return new ChangePlanRequestBuilder(planId, cycleId, customerUniqueId, companyDomain, subscriptionUniqueId);
    }
    private okhttp3.Call featureTagsSplitCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}/tags/split"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featureTagsSplitValidateBeforeCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling featureTagsSplit(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling featureTagsSplit(Async)");
        }

        return featureTagsSplitCall(companyDomain, subscriptionUniqueId, _callback);

    }


    private ApiResponse<SubscriptionFeatureTagsSplitResponse> featureTagsSplitWithHttpInfo(String companyDomain, String subscriptionUniqueId) throws ApiException {
        okhttp3.Call localVarCall = featureTagsSplitValidateBeforeCall(companyDomain, subscriptionUniqueId, null);
        Type localVarReturnType = new TypeToken<SubscriptionFeatureTagsSplitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call featureTagsSplitAsync(String companyDomain, String subscriptionUniqueId, final ApiCallback<SubscriptionFeatureTagsSplitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = featureTagsSplitValidateBeforeCall(companyDomain, subscriptionUniqueId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionFeatureTagsSplitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeatureTagsSplitRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;

        private FeatureTagsSplitRequestBuilder(String companyDomain, String subscriptionUniqueId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
        }

        /**
         * Build call for featureTagsSplit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return featureTagsSplitCall(companyDomain, subscriptionUniqueId, _callback);
        }


        /**
         * Execute featureTagsSplit request
         * @return SubscriptionFeatureTagsSplitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SubscriptionFeatureTagsSplitResponse execute() throws ApiException {
            ApiResponse<SubscriptionFeatureTagsSplitResponse> localVarResp = featureTagsSplitWithHttpInfo(companyDomain, subscriptionUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute featureTagsSplit request with HTTP info returned
         * @return ApiResponse&lt;SubscriptionFeatureTagsSplitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SubscriptionFeatureTagsSplitResponse> executeWithHttpInfo() throws ApiException {
            return featureTagsSplitWithHttpInfo(companyDomain, subscriptionUniqueId);
        }

        /**
         * Execute featureTagsSplit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionFeatureTagsSplitResponse> _callback) throws ApiException {
            return featureTagsSplitAsync(companyDomain, subscriptionUniqueId, _callback);
        }
    }

    /**
     * Feature tags by plan and custom tags
     * Returns a list of feature tags in a subscription split by plan tags and custom tags
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @return FeatureTagsSplitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public FeatureTagsSplitRequestBuilder featureTagsSplit(String companyDomain, String subscriptionUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        return new FeatureTagsSplitRequestBuilder(companyDomain, subscriptionUniqueId);
    }
    private okhttp3.Call getCountersValueCall(String companyDomain, String subscriptionUniqueId, String counterId, LocalDate from, LocalDate to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/{companyDomain}/subscriptions/{subscriptionUniqueId}/counters/{counterId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()))
            .replace("{" + "counterId" + "}", localVarApiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountersValueValidateBeforeCall(String companyDomain, String subscriptionUniqueId, String counterId, LocalDate from, LocalDate to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getCountersValue(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling getCountersValue(Async)");
        }

        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getCountersValue(Async)");
        }

        return getCountersValueCall(companyDomain, subscriptionUniqueId, counterId, from, to, _callback);

    }


    private ApiResponse<SubscriptionGetCountersValueResponse> getCountersValueWithHttpInfo(String companyDomain, String subscriptionUniqueId, String counterId, LocalDate from, LocalDate to) throws ApiException {
        okhttp3.Call localVarCall = getCountersValueValidateBeforeCall(companyDomain, subscriptionUniqueId, counterId, from, to, null);
        Type localVarReturnType = new TypeToken<SubscriptionGetCountersValueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCountersValueAsync(String companyDomain, String subscriptionUniqueId, String counterId, LocalDate from, LocalDate to, final ApiCallback<SubscriptionGetCountersValueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountersValueValidateBeforeCall(companyDomain, subscriptionUniqueId, counterId, from, to, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGetCountersValueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCountersValueRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;
        private final String counterId;
        private LocalDate from;
        private LocalDate to;

        private GetCountersValueRequestBuilder(String companyDomain, String subscriptionUniqueId, String counterId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
            this.counterId = counterId;
        }

        /**
         * Set from
         * @param from The date you would like the counter value from; format is ISO 8601, e.g. 2020-08-25T18:35:00.000Z (optional)
         * @return GetCountersValueRequestBuilder
         */
        public GetCountersValueRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to The date you would like the counter value to; format is ISO 8601, e.g. 2020-08-25T18:35:00.000Z (optional)
         * @return GetCountersValueRequestBuilder
         */
        public GetCountersValueRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Build call for getCountersValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCountersValueCall(companyDomain, subscriptionUniqueId, counterId, from, to, _callback);
        }


        /**
         * Execute getCountersValue request
         * @return SubscriptionGetCountersValueResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SubscriptionGetCountersValueResponse execute() throws ApiException {
            ApiResponse<SubscriptionGetCountersValueResponse> localVarResp = getCountersValueWithHttpInfo(companyDomain, subscriptionUniqueId, counterId, from, to);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCountersValue request with HTTP info returned
         * @return ApiResponse&lt;SubscriptionGetCountersValueResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SubscriptionGetCountersValueResponse> executeWithHttpInfo() throws ApiException {
            return getCountersValueWithHttpInfo(companyDomain, subscriptionUniqueId, counterId, from, to);
        }

        /**
         * Execute getCountersValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionGetCountersValueResponse> _callback) throws ApiException {
            return getCountersValueAsync(companyDomain, subscriptionUniqueId, counterId, from, to, _callback);
        }
    }

    /**
     * Counter value
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @param counterId The unique identifier of the counter in the Billsby platform (required)
     * @return GetCountersValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCountersValueRequestBuilder getCountersValue(String companyDomain, String subscriptionUniqueId, String counterId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        if (counterId == null) throw new IllegalArgumentException("\"counterId\" is required but got null");
            

        return new GetCountersValueRequestBuilder(companyDomain, subscriptionUniqueId, counterId);
    }
    private okhttp3.Call getDetailsCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDetails(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling getDetails(Async)");
        }

        return getDetailsCall(companyDomain, subscriptionUniqueId, _callback);

    }


    private ApiResponse<String> getDetailsWithHttpInfo(String companyDomain, String subscriptionUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyDomain, subscriptionUniqueId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String companyDomain, String subscriptionUniqueId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyDomain, subscriptionUniqueId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;

        private GetDetailsRequestBuilder(String companyDomain, String subscriptionUniqueId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(companyDomain, subscriptionUniqueId, _callback);
        }


        /**
         * Execute getDetails request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getDetailsWithHttpInfo(companyDomain, subscriptionUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(companyDomain, subscriptionUniqueId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getDetailsAsync(companyDomain, subscriptionUniqueId, _callback);
        }
    }

    /**
     * Subscription details
     * This query gets individual subscription details using the unique identifier provided in the Billsby platform
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String companyDomain, String subscriptionUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        return new GetDetailsRequestBuilder(companyDomain, subscriptionUniqueId);
    }
    private okhttp3.Call getEventLogsCall(String companyDomain, String subscriptionUniqueId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}/logs"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventLogsValidateBeforeCall(String companyDomain, String subscriptionUniqueId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getEventLogs(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling getEventLogs(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getEventLogs(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getEventLogs(Async)");
        }

        return getEventLogsCall(companyDomain, subscriptionUniqueId, page, pageSize, _callback);

    }


    private ApiResponse<SubscriptionGetEventLogsResponse> getEventLogsWithHttpInfo(String companyDomain, String subscriptionUniqueId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getEventLogsValidateBeforeCall(companyDomain, subscriptionUniqueId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<SubscriptionGetEventLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventLogsAsync(String companyDomain, String subscriptionUniqueId, Integer page, Integer pageSize, final ApiCallback<SubscriptionGetEventLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventLogsValidateBeforeCall(companyDomain, subscriptionUniqueId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGetEventLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventLogsRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;
        private final Integer page;
        private final Integer pageSize;

        private GetEventLogsRequestBuilder(String companyDomain, String subscriptionUniqueId, Integer page, Integer pageSize) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
            this.page = page;
            this.pageSize = pageSize;
        }

        /**
         * Build call for getEventLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventLogsCall(companyDomain, subscriptionUniqueId, page, pageSize, _callback);
        }


        /**
         * Execute getEventLogs request
         * @return SubscriptionGetEventLogsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SubscriptionGetEventLogsResponse execute() throws ApiException {
            ApiResponse<SubscriptionGetEventLogsResponse> localVarResp = getEventLogsWithHttpInfo(companyDomain, subscriptionUniqueId, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventLogs request with HTTP info returned
         * @return ApiResponse&lt;SubscriptionGetEventLogsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SubscriptionGetEventLogsResponse> executeWithHttpInfo() throws ApiException {
            return getEventLogsWithHttpInfo(companyDomain, subscriptionUniqueId, page, pageSize);
        }

        /**
         * Execute getEventLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionGetEventLogsResponse> _callback) throws ApiException {
            return getEventLogsAsync(companyDomain, subscriptionUniqueId, page, pageSize, _callback);
        }
    }

    /**
     * Event logs
     * This query returns the event logs of a subscription
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @param page The page of customers you would like to view (required)
     * @param pageSize The number of records to return per page (max 100) (required)
     * @return GetEventLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetEventLogsRequestBuilder getEventLogs(String companyDomain, String subscriptionUniqueId, Integer page, Integer pageSize) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new GetEventLogsRequestBuilder(companyDomain, subscriptionUniqueId, page, pageSize);
    }
    private okhttp3.Call getShippingAddressCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}/shippingAddress"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShippingAddressValidateBeforeCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getShippingAddress(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling getShippingAddress(Async)");
        }

        return getShippingAddressCall(companyDomain, subscriptionUniqueId, _callback);

    }


    private ApiResponse<SubscriptionGetShippingAddressResponse> getShippingAddressWithHttpInfo(String companyDomain, String subscriptionUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getShippingAddressValidateBeforeCall(companyDomain, subscriptionUniqueId, null);
        Type localVarReturnType = new TypeToken<SubscriptionGetShippingAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShippingAddressAsync(String companyDomain, String subscriptionUniqueId, final ApiCallback<SubscriptionGetShippingAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShippingAddressValidateBeforeCall(companyDomain, subscriptionUniqueId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGetShippingAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetShippingAddressRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;

        private GetShippingAddressRequestBuilder(String companyDomain, String subscriptionUniqueId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
        }

        /**
         * Build call for getShippingAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShippingAddressCall(companyDomain, subscriptionUniqueId, _callback);
        }


        /**
         * Execute getShippingAddress request
         * @return SubscriptionGetShippingAddressResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SubscriptionGetShippingAddressResponse execute() throws ApiException {
            ApiResponse<SubscriptionGetShippingAddressResponse> localVarResp = getShippingAddressWithHttpInfo(companyDomain, subscriptionUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getShippingAddress request with HTTP info returned
         * @return ApiResponse&lt;SubscriptionGetShippingAddressResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SubscriptionGetShippingAddressResponse> executeWithHttpInfo() throws ApiException {
            return getShippingAddressWithHttpInfo(companyDomain, subscriptionUniqueId);
        }

        /**
         * Execute getShippingAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionGetShippingAddressResponse> _callback) throws ApiException {
            return getShippingAddressAsync(companyDomain, subscriptionUniqueId, _callback);
        }
    }

    /**
     * Shipping address
     * This query gets individual subscription details using the unique identifier provided in the Billsby platform
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @return GetShippingAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetShippingAddressRequestBuilder getShippingAddress(String companyDomain, String subscriptionUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        return new GetShippingAddressRequestBuilder(companyDomain, subscriptionUniqueId);
    }
    private okhttp3.Call listSubscriptionsCall(String companyDomain, Integer page, Integer pageSize, String orderBy, String orderByDescending, Boolean isActive, Boolean isInFreeTrial, String productName, String planName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (orderByDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderByDescending", orderByDescending));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (isInFreeTrial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isInFreeTrial", isInFreeTrial));
        }

        if (productName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productName", productName));
        }

        if (planName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planName", planName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscriptionsValidateBeforeCall(String companyDomain, Integer page, Integer pageSize, String orderBy, String orderByDescending, Boolean isActive, Boolean isInFreeTrial, String productName, String planName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listSubscriptions(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listSubscriptions(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listSubscriptions(Async)");
        }

        return listSubscriptionsCall(companyDomain, page, pageSize, orderBy, orderByDescending, isActive, isInFreeTrial, productName, planName, _callback);

    }


    private ApiResponse<SubscriptionListSubscriptionsResponse> listSubscriptionsWithHttpInfo(String companyDomain, Integer page, Integer pageSize, String orderBy, String orderByDescending, Boolean isActive, Boolean isInFreeTrial, String productName, String planName) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(companyDomain, page, pageSize, orderBy, orderByDescending, isActive, isInFreeTrial, productName, planName, null);
        Type localVarReturnType = new TypeToken<SubscriptionListSubscriptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSubscriptionsAsync(String companyDomain, Integer page, Integer pageSize, String orderBy, String orderByDescending, Boolean isActive, Boolean isInFreeTrial, String productName, String planName, final ApiCallback<SubscriptionListSubscriptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(companyDomain, page, pageSize, orderBy, orderByDescending, isActive, isInFreeTrial, productName, planName, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionListSubscriptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSubscriptionsRequestBuilder {
        private final String companyDomain;
        private final Integer page;
        private final Integer pageSize;
        private String orderBy;
        private String orderByDescending;
        private Boolean isActive;
        private Boolean isInFreeTrial;
        private String productName;
        private String planName;

        private ListSubscriptionsRequestBuilder(String companyDomain, Integer page, Integer pageSize) {
            this.companyDomain = companyDomain;
            this.page = page;
            this.pageSize = pageSize;
        }

        /**
         * Set orderBy
         * @param orderBy You can order the subscriptions by any of the subscription object properties (e.g. CreatedOn to sort by date of creation) (optional)
         * @return ListSubscriptionsRequestBuilder
         */
        public ListSubscriptionsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set orderByDescending
         * @param orderByDescending The ordering direction of the previously set property (e.g. Descending in CreatedOn will sort from newest to oldest, non-descending from oldest to newest) (optional)
         * @return ListSubscriptionsRequestBuilder
         */
        public ListSubscriptionsRequestBuilder orderByDescending(String orderByDescending) {
            this.orderByDescending = orderByDescending;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive Will show only the subscriptions that are active (optional)
         * @return ListSubscriptionsRequestBuilder
         */
        public ListSubscriptionsRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set isInFreeTrial
         * @param isInFreeTrial Will show only the subscriptions that are in free trial (optional)
         * @return ListSubscriptionsRequestBuilder
         */
        public ListSubscriptionsRequestBuilder isInFreeTrial(Boolean isInFreeTrial) {
            this.isInFreeTrial = isInFreeTrial;
            return this;
        }
        
        /**
         * Set productName
         * @param productName Will show only the subscriptions that has products whose names matches the value provided here (optional)
         * @return ListSubscriptionsRequestBuilder
         */
        public ListSubscriptionsRequestBuilder productName(String productName) {
            this.productName = productName;
            return this;
        }
        
        /**
         * Set planName
         * @param planName Will show only the subscriptions that has plans whose names matches the value provided here (optional)
         * @return ListSubscriptionsRequestBuilder
         */
        public ListSubscriptionsRequestBuilder planName(String planName) {
            this.planName = planName;
            return this;
        }
        
        /**
         * Build call for listSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSubscriptionsCall(companyDomain, page, pageSize, orderBy, orderByDescending, isActive, isInFreeTrial, productName, planName, _callback);
        }


        /**
         * Execute listSubscriptions request
         * @return SubscriptionListSubscriptionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public SubscriptionListSubscriptionsResponse execute() throws ApiException {
            ApiResponse<SubscriptionListSubscriptionsResponse> localVarResp = listSubscriptionsWithHttpInfo(companyDomain, page, pageSize, orderBy, orderByDescending, isActive, isInFreeTrial, productName, planName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;SubscriptionListSubscriptionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SubscriptionListSubscriptionsResponse> executeWithHttpInfo() throws ApiException {
            return listSubscriptionsWithHttpInfo(companyDomain, page, pageSize, orderBy, orderByDescending, isActive, isInFreeTrial, productName, planName);
        }

        /**
         * Execute listSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SubscriptionListSubscriptionsResponse> _callback) throws ApiException {
            return listSubscriptionsAsync(companyDomain, page, pageSize, orderBy, orderByDescending, isActive, isInFreeTrial, productName, planName, _callback);
        }
    }

    /**
     * List subscriptions
     * This query gets a list of all of the subscriptions in your account with their subscription IDs so that you can later lookup individual subscriptions
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param page The page of customers you would like to view (required)
     * @param pageSize The number of records to return per page (required)
     * @return ListSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListSubscriptionsRequestBuilder listSubscriptions(String companyDomain, Integer page, Integer pageSize) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new ListSubscriptionsRequestBuilder(companyDomain, page, pageSize);
    }
    private okhttp3.Call listTagsBySubscriptionCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}/tags"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsBySubscriptionValidateBeforeCall(String companyDomain, String subscriptionUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listTagsBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling listTagsBySubscription(Async)");
        }

        return listTagsBySubscriptionCall(companyDomain, subscriptionUniqueId, _callback);

    }


    private ApiResponse<List<String>> listTagsBySubscriptionWithHttpInfo(String companyDomain, String subscriptionUniqueId) throws ApiException {
        okhttp3.Call localVarCall = listTagsBySubscriptionValidateBeforeCall(companyDomain, subscriptionUniqueId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTagsBySubscriptionAsync(String companyDomain, String subscriptionUniqueId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsBySubscriptionValidateBeforeCall(companyDomain, subscriptionUniqueId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTagsBySubscriptionRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;

        private ListTagsBySubscriptionRequestBuilder(String companyDomain, String subscriptionUniqueId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
        }

        /**
         * Build call for listTagsBySubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTagsBySubscriptionCall(companyDomain, subscriptionUniqueId, _callback);
        }


        /**
         * Execute listTagsBySubscription request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = listTagsBySubscriptionWithHttpInfo(companyDomain, subscriptionUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTagsBySubscription request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return listTagsBySubscriptionWithHttpInfo(companyDomain, subscriptionUniqueId);
        }

        /**
         * Execute listTagsBySubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return listTagsBySubscriptionAsync(companyDomain, subscriptionUniqueId, _callback);
        }
    }

    /**
     * Feature tags by Subscription
     * This query returns a list of feature tags in a subscription
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @return ListTagsBySubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsBySubscriptionRequestBuilder listTagsBySubscription(String companyDomain, String subscriptionUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        return new ListTagsBySubscriptionRequestBuilder(companyDomain, subscriptionUniqueId);
    }
    private okhttp3.Call removeFeatureTagCall(String companyDomain, String tagname, String subsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/tags/{tagname}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "tagname" + "}", localVarApiClient.escapeString(tagname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subsId", subsId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFeatureTagValidateBeforeCall(String companyDomain, String tagname, String subsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling removeFeatureTag(Async)");
        }

        // verify the required parameter 'tagname' is set
        if (tagname == null) {
            throw new ApiException("Missing the required parameter 'tagname' when calling removeFeatureTag(Async)");
        }

        return removeFeatureTagCall(companyDomain, tagname, subsId, _callback);

    }


    private ApiResponse<String> removeFeatureTagWithHttpInfo(String companyDomain, String tagname, String subsId) throws ApiException {
        okhttp3.Call localVarCall = removeFeatureTagValidateBeforeCall(companyDomain, tagname, subsId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFeatureTagAsync(String companyDomain, String tagname, String subsId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFeatureTagValidateBeforeCall(companyDomain, tagname, subsId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFeatureTagRequestBuilder {
        private final String companyDomain;
        private final String tagname;
        private String subsId;

        private RemoveFeatureTagRequestBuilder(String companyDomain, String tagname) {
            this.companyDomain = companyDomain;
            this.tagname = tagname;
        }

        /**
         * Set subsId
         * @param subsId The unique identifier of the subscription in the Billsby platform (optional)
         * @return RemoveFeatureTagRequestBuilder
         */
        public RemoveFeatureTagRequestBuilder subsId(String subsId) {
            this.subsId = subsId;
            return this;
        }
        
        /**
         * Build call for removeFeatureTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFeatureTagCall(companyDomain, tagname, subsId, _callback);
        }


        /**
         * Execute removeFeatureTag request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = removeFeatureTagWithHttpInfo(companyDomain, tagname, subsId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFeatureTag request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return removeFeatureTagWithHttpInfo(companyDomain, tagname, subsId);
        }

        /**
         * Execute removeFeatureTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return removeFeatureTagAsync(companyDomain, tagname, subsId, _callback);
        }
    }

    /**
     * Delete feature tag
     * Delete a custom feature tag from a list of subscriptions
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param tagname The name of the custom feature tag you would like to delete (required)
     * @return RemoveFeatureTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFeatureTagRequestBuilder removeFeatureTag(String companyDomain, String tagname) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (tagname == null) throw new IllegalArgumentException("\"tagname\" is required but got null");
            

        return new RemoveFeatureTagRequestBuilder(companyDomain, tagname);
    }
    private okhttp3.Call updateCounterCall(String companyDomain, String subscriptionUniqueId, String counterId, SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionUpdateCounterRequest;

        // create path and map variables
        String localVarPath = "/operations/{companyDomain}/subscriptions/{subscriptionUniqueId}/counters/{counterId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()))
            .replace("{" + "counterId" + "}", localVarApiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCounterValidateBeforeCall(String companyDomain, String subscriptionUniqueId, String counterId, SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateCounter(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling updateCounter(Async)");
        }

        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling updateCounter(Async)");
        }

        return updateCounterCall(companyDomain, subscriptionUniqueId, counterId, subscriptionUpdateCounterRequest, _callback);

    }


    private ApiResponse<String> updateCounterWithHttpInfo(String companyDomain, String subscriptionUniqueId, String counterId, SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCounterValidateBeforeCall(companyDomain, subscriptionUniqueId, counterId, subscriptionUpdateCounterRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCounterAsync(String companyDomain, String subscriptionUniqueId, String counterId, SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCounterValidateBeforeCall(companyDomain, subscriptionUniqueId, counterId, subscriptionUpdateCounterRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCounterRequestBuilder {
        private final String operationType;
        private final Integer value;
        private final String companyDomain;
        private final String subscriptionUniqueId;
        private final String counterId;

        private UpdateCounterRequestBuilder(String operationType, Integer value, String companyDomain, String subscriptionUniqueId, String counterId) {
            this.operationType = operationType;
            this.value = value;
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
            this.counterId = counterId;
        }

        /**
         * Build call for updateCounter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest = buildBodyParams();
            return updateCounterCall(companyDomain, subscriptionUniqueId, counterId, subscriptionUpdateCounterRequest, _callback);
        }

        private SubscriptionUpdateCounterRequest buildBodyParams() {
            SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest = new SubscriptionUpdateCounterRequest();
            subscriptionUpdateCounterRequest.operationType(this.operationType);
            subscriptionUpdateCounterRequest.value(this.value);
            return subscriptionUpdateCounterRequest;
        }

        /**
         * Execute updateCounter request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest = buildBodyParams();
            ApiResponse<String> localVarResp = updateCounterWithHttpInfo(companyDomain, subscriptionUniqueId, counterId, subscriptionUpdateCounterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCounter request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest = buildBodyParams();
            return updateCounterWithHttpInfo(companyDomain, subscriptionUniqueId, counterId, subscriptionUpdateCounterRequest);
        }

        /**
         * Execute updateCounter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            SubscriptionUpdateCounterRequest subscriptionUpdateCounterRequest = buildBodyParams();
            return updateCounterAsync(companyDomain, subscriptionUniqueId, counterId, subscriptionUpdateCounterRequest, _callback);
        }
    }

    /**
     * Update counter
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @param counterId The unique identifier of the counter in the Billsby platform (required)
     * @return UpdateCounterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCounterRequestBuilder updateCounter(String operationType, Integer value, String companyDomain, String subscriptionUniqueId, String counterId) throws IllegalArgumentException {
        if (operationType == null) throw new IllegalArgumentException("\"operationType\" is required but got null");
            

        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        if (counterId == null) throw new IllegalArgumentException("\"counterId\" is required but got null");
            

        return new UpdateCounterRequestBuilder(operationType, value, companyDomain, subscriptionUniqueId, counterId);
    }
    private okhttp3.Call updateRenewalDateCall(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionUpdateRenewalDateRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}/renewaldate"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRenewalDateValidateBeforeCall(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateRenewalDate(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling updateRenewalDate(Async)");
        }

        return updateRenewalDateCall(companyDomain, subscriptionUniqueId, subscriptionUpdateRenewalDateRequest, _callback);

    }


    private ApiResponse<Object> updateRenewalDateWithHttpInfo(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRenewalDateValidateBeforeCall(companyDomain, subscriptionUniqueId, subscriptionUpdateRenewalDateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRenewalDateAsync(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRenewalDateValidateBeforeCall(companyDomain, subscriptionUniqueId, subscriptionUpdateRenewalDateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRenewalDateRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;
        private Boolean pauseSubscription;
        private LocalDate newRenewalDate;

        private UpdateRenewalDateRequestBuilder(String companyDomain, String subscriptionUniqueId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
        }

        /**
         * Set pauseSubscription
         * @param pauseSubscription Set the subscription status to paused until next renewal date. (optional)
         * @return UpdateRenewalDateRequestBuilder
         */
        public UpdateRenewalDateRequestBuilder pauseSubscription(Boolean pauseSubscription) {
            this.pauseSubscription = pauseSubscription;
            return this;
        }
        
        /**
         * Set newRenewalDate
         * @param newRenewalDate The new next renewal date (optional)
         * @return UpdateRenewalDateRequestBuilder
         */
        public UpdateRenewalDateRequestBuilder newRenewalDate(LocalDate newRenewalDate) {
            this.newRenewalDate = newRenewalDate;
            return this;
        }
        
        /**
         * Build call for updateRenewalDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest = buildBodyParams();
            return updateRenewalDateCall(companyDomain, subscriptionUniqueId, subscriptionUpdateRenewalDateRequest, _callback);
        }

        private SubscriptionUpdateRenewalDateRequest buildBodyParams() {
            SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest = new SubscriptionUpdateRenewalDateRequest();
            subscriptionUpdateRenewalDateRequest.pauseSubscription(this.pauseSubscription);
            subscriptionUpdateRenewalDateRequest.newRenewalDate(this.newRenewalDate);
            return subscriptionUpdateRenewalDateRequest;
        }

        /**
         * Execute updateRenewalDate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateRenewalDateWithHttpInfo(companyDomain, subscriptionUniqueId, subscriptionUpdateRenewalDateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRenewalDate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest = buildBodyParams();
            return updateRenewalDateWithHttpInfo(companyDomain, subscriptionUniqueId, subscriptionUpdateRenewalDateRequest);
        }

        /**
         * Execute updateRenewalDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SubscriptionUpdateRenewalDateRequest subscriptionUpdateRenewalDateRequest = buildBodyParams();
            return updateRenewalDateAsync(companyDomain, subscriptionUniqueId, subscriptionUpdateRenewalDateRequest, _callback);
        }
    }

    /**
     * Update next renewal date
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @return UpdateRenewalDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRenewalDateRequestBuilder updateRenewalDate(String companyDomain, String subscriptionUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        return new UpdateRenewalDateRequestBuilder(companyDomain, subscriptionUniqueId);
    }
    private okhttp3.Call updateShippingAddressCall(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionUpdateShippingAddressRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions/{subscriptionUniqueId}/shippingAddress"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "subscriptionUniqueId" + "}", localVarApiClient.escapeString(subscriptionUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShippingAddressValidateBeforeCall(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateShippingAddress(Async)");
        }

        // verify the required parameter 'subscriptionUniqueId' is set
        if (subscriptionUniqueId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUniqueId' when calling updateShippingAddress(Async)");
        }

        return updateShippingAddressCall(companyDomain, subscriptionUniqueId, subscriptionUpdateShippingAddressRequest, _callback);

    }


    private ApiResponse<String> updateShippingAddressWithHttpInfo(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = updateShippingAddressValidateBeforeCall(companyDomain, subscriptionUniqueId, subscriptionUpdateShippingAddressRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateShippingAddressAsync(String companyDomain, String subscriptionUniqueId, SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShippingAddressValidateBeforeCall(companyDomain, subscriptionUniqueId, subscriptionUpdateShippingAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateShippingAddressRequestBuilder {
        private final String companyDomain;
        private final String subscriptionUniqueId;
        private String addressLine1;
        private String addressLine2;
        private String state;
        private String city;
        private String country;
        private String postCode;

        private UpdateShippingAddressRequestBuilder(String companyDomain, String subscriptionUniqueId) {
            this.companyDomain = companyDomain;
            this.subscriptionUniqueId = subscriptionUniqueId;
        }

        /**
         * Set addressLine1
         * @param addressLine1 The first line of the new address that you want to update to (optional)
         * @return UpdateShippingAddressRequestBuilder
         */
        public UpdateShippingAddressRequestBuilder addressLine1(String addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }
        
        /**
         * Set addressLine2
         * @param addressLine2 The second line of the new address that you want to update to (optional)
         * @return UpdateShippingAddressRequestBuilder
         */
        public UpdateShippingAddressRequestBuilder addressLine2(String addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }
        
        /**
         * Set state
         * @param state The state of the new address that you want to update to (optional)
         * @return UpdateShippingAddressRequestBuilder
         */
        public UpdateShippingAddressRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set city
         * @param city The city of the new address that you want to update to (optional)
         * @return UpdateShippingAddressRequestBuilder
         */
        public UpdateShippingAddressRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set country
         * @param country The country of the new address that you wish to change to (optional)
         * @return UpdateShippingAddressRequestBuilder
         */
        public UpdateShippingAddressRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set postCode
         * @param postCode The post code of the new address that you want to update to (optional)
         * @return UpdateShippingAddressRequestBuilder
         */
        public UpdateShippingAddressRequestBuilder postCode(String postCode) {
            this.postCode = postCode;
            return this;
        }
        
        /**
         * Build call for updateShippingAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest = buildBodyParams();
            return updateShippingAddressCall(companyDomain, subscriptionUniqueId, subscriptionUpdateShippingAddressRequest, _callback);
        }

        private SubscriptionUpdateShippingAddressRequest buildBodyParams() {
            SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest = new SubscriptionUpdateShippingAddressRequest();
            subscriptionUpdateShippingAddressRequest.addressLine1(this.addressLine1);
            subscriptionUpdateShippingAddressRequest.addressLine2(this.addressLine2);
            subscriptionUpdateShippingAddressRequest.state(this.state);
            subscriptionUpdateShippingAddressRequest.city(this.city);
            subscriptionUpdateShippingAddressRequest.country(this.country);
            subscriptionUpdateShippingAddressRequest.postCode(this.postCode);
            return subscriptionUpdateShippingAddressRequest;
        }

        /**
         * Execute updateShippingAddress request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest = buildBodyParams();
            ApiResponse<String> localVarResp = updateShippingAddressWithHttpInfo(companyDomain, subscriptionUniqueId, subscriptionUpdateShippingAddressRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateShippingAddress request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest = buildBodyParams();
            return updateShippingAddressWithHttpInfo(companyDomain, subscriptionUniqueId, subscriptionUpdateShippingAddressRequest);
        }

        /**
         * Execute updateShippingAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            SubscriptionUpdateShippingAddressRequest subscriptionUpdateShippingAddressRequest = buildBodyParams();
            return updateShippingAddressAsync(companyDomain, subscriptionUniqueId, subscriptionUpdateShippingAddressRequest, _callback);
        }
    }

    /**
     * Update subscription shipping address
     * Update the shipping address for a subscription
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param subscriptionUniqueId The unique identifier of the subscription in the Billsby platform (required)
     * @return UpdateShippingAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateShippingAddressRequestBuilder updateShippingAddress(String companyDomain, String subscriptionUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (subscriptionUniqueId == null) throw new IllegalArgumentException("\"subscriptionUniqueId\" is required but got null");
            

        return new UpdateShippingAddressRequestBuilder(companyDomain, subscriptionUniqueId);
    }
}

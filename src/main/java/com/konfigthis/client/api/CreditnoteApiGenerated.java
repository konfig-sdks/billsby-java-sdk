/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreditnoteListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CreditnoteApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CreditnoteApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CreditnoteApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"ApiKey\" is required but no API key was provided. Please set \"ApiKey\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listCall(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, Boolean isFailed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/companies/creditnotes"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (orderByDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderByDescending", orderByDescending));
        }

        if (isPending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPending", isPending));
        }

        if (isPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPaid", isPaid));
        }

        if (isFailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFailed", isFailed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, Boolean isFailed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling list(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling list(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling list(Async)");
        }

        return listCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isFailed, _callback);

    }


    private ApiResponse<CreditnoteListResponse> listWithHttpInfo(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, Boolean isFailed) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isFailed, null);
        Type localVarReturnType = new TypeToken<CreditnoteListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, Boolean isFailed, final ApiCallback<CreditnoteListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isFailed, _callback);
        Type localVarReturnType = new TypeToken<CreditnoteListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String companyDomain;
        private final Integer page;
        private final Integer pageSize;
        private String query;
        private String orderBy;
        private String orderByDescending;
        private Boolean isPending;
        private Boolean isPaid;
        private Boolean isFailed;

        private ListRequestBuilder(String companyDomain, Integer page, Integer pageSize) {
            this.companyDomain = companyDomain;
            this.page = page;
            this.pageSize = pageSize;
        }

        /**
         * Set query
         * @param query Add search terms here to filter results (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Sort the results by particular properties (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set orderByDescending
         * @param orderByDescending Sort the results by particular properties in descending order (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderByDescending(String orderByDescending) {
            this.orderByDescending = orderByDescending;
            return this;
        }
        
        /**
         * Set isPending
         * @param isPending Do you want to show credit notes with the status &#39;pending&#39;; true or false (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder isPending(Boolean isPending) {
            this.isPending = isPending;
            return this;
        }
        
        /**
         * Set isPaid
         * @param isPaid Do you want to show credit notes with the status &#39;paid&#39;; true or false (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder isPaid(Boolean isPaid) {
            this.isPaid = isPaid;
            return this;
        }
        
        /**
         * Set isFailed
         * @param isFailed Do you want to show credit notes with the status &#39;failed&#39;; true or false (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder isFailed(Boolean isFailed) {
            this.isFailed = isFailed;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isFailed, _callback);
        }


        /**
         * Execute list request
         * @return CreditnoteListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CreditnoteListResponse execute() throws ApiException {
            ApiResponse<CreditnoteListResponse> localVarResp = listWithHttpInfo(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isFailed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CreditnoteListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreditnoteListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isFailed);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreditnoteListResponse> _callback) throws ApiException {
            return listAsync(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isFailed, _callback);
        }
    }

    /**
     * Company credit notes
     * Get a list of all your company&#39;s credit notes
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param page The page of credit notes you would like to view (required)
     * @param pageSize The number of records to return per page (max 100) (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String companyDomain, Integer page, Integer pageSize) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new ListRequestBuilder(companyDomain, page, pageSize);
    }
    private okhttp3.Call reattemptPaymentCall(String creditNoteNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain} /creditNotes /{creditNoteNumber} /Payment"
            .replace("{" + "creditNoteNumber" + "}", localVarApiClient.escapeString(creditNoteNumber.toString()))
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reattemptPaymentValidateBeforeCall(String creditNoteNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditNoteNumber' is set
        if (creditNoteNumber == null) {
            throw new ApiException("Missing the required parameter 'creditNoteNumber' when calling reattemptPayment(Async)");
        }

        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling reattemptPayment(Async)");
        }

        return reattemptPaymentCall(creditNoteNumber, companyDomain, _callback);

    }


    private ApiResponse<String> reattemptPaymentWithHttpInfo(String creditNoteNumber, String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = reattemptPaymentValidateBeforeCall(creditNoteNumber, companyDomain, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reattemptPaymentAsync(String creditNoteNumber, String companyDomain, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = reattemptPaymentValidateBeforeCall(creditNoteNumber, companyDomain, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReattemptPaymentRequestBuilder {
        private final String creditNoteNumber;
        private final String companyDomain;

        private ReattemptPaymentRequestBuilder(String creditNoteNumber, String companyDomain) {
            this.creditNoteNumber = creditNoteNumber;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for reattemptPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reattemptPaymentCall(creditNoteNumber, companyDomain, _callback);
        }


        /**
         * Execute reattemptPayment request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = reattemptPaymentWithHttpInfo(creditNoteNumber, companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reattemptPayment request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return reattemptPaymentWithHttpInfo(creditNoteNumber, companyDomain);
        }

        /**
         * Execute reattemptPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return reattemptPaymentAsync(creditNoteNumber, companyDomain, _callback);
        }
    }

    /**
     * Reattempt credit note payment
     * 
     * @param creditNoteNumber The unique identifier of the credit note in the Billsby platform (required)
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return ReattemptPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ReattemptPaymentRequestBuilder reattemptPayment(String creditNoteNumber, String companyDomain) throws IllegalArgumentException {
        if (creditNoteNumber == null) throw new IllegalArgumentException("\"creditNoteNumber\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ReattemptPaymentRequestBuilder(creditNoteNumber, companyDomain);
    }
}

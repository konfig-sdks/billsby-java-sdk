/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InvoiceCreateOneTimeChargeRequest;
import com.konfigthis.client.model.InvoiceCreateRefundRequest;
import com.konfigthis.client.model.InvoiceCreateRefundResponse;
import com.konfigthis.client.model.InvoiceDetailsResponse;
import com.konfigthis.client.model.InvoiceGetCustomerInvoicesResponseInner;
import com.konfigthis.client.model.InvoiceGetPaymentLogsResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoiceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoiceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"ApiKey\" is required but no API key was provided. Please set \"ApiKey\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOneTimeChargeCall(String companyDomain, String customerUniqueId, InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceCreateOneTimeChargeRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/invoices"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOneTimeChargeValidateBeforeCall(String companyDomain, String customerUniqueId, InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createOneTimeCharge(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling createOneTimeCharge(Async)");
        }

        return createOneTimeChargeCall(companyDomain, customerUniqueId, invoiceCreateOneTimeChargeRequest, _callback);

    }


    private ApiResponse<Boolean> createOneTimeChargeWithHttpInfo(String companyDomain, String customerUniqueId, InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest) throws ApiException {
        okhttp3.Call localVarCall = createOneTimeChargeValidateBeforeCall(companyDomain, customerUniqueId, invoiceCreateOneTimeChargeRequest, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOneTimeChargeAsync(String companyDomain, String customerUniqueId, InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOneTimeChargeValidateBeforeCall(companyDomain, customerUniqueId, invoiceCreateOneTimeChargeRequest, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOneTimeChargeRequestBuilder {
        private final String description;
        private final String currencyCode;
        private final Integer amount;
        private final String companyDomain;
        private final String customerUniqueId;

        private CreateOneTimeChargeRequestBuilder(String description, String currencyCode, Integer amount, String companyDomain, String customerUniqueId) {
            this.description = description;
            this.currencyCode = currencyCode;
            this.amount = amount;
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for createOneTimeCharge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest = buildBodyParams();
            return createOneTimeChargeCall(companyDomain, customerUniqueId, invoiceCreateOneTimeChargeRequest, _callback);
        }

        private InvoiceCreateOneTimeChargeRequest buildBodyParams() {
            InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest = new InvoiceCreateOneTimeChargeRequest();
            invoiceCreateOneTimeChargeRequest.description(this.description);
            invoiceCreateOneTimeChargeRequest.currencyCode(this.currencyCode);
            invoiceCreateOneTimeChargeRequest.amount(this.amount);
            return invoiceCreateOneTimeChargeRequest;
        }

        /**
         * Execute createOneTimeCharge request
         * @return Boolean
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Boolean execute() throws ApiException {
            InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest = buildBodyParams();
            ApiResponse<Boolean> localVarResp = createOneTimeChargeWithHttpInfo(companyDomain, customerUniqueId, invoiceCreateOneTimeChargeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOneTimeCharge request with HTTP info returned
         * @return ApiResponse&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Boolean> executeWithHttpInfo() throws ApiException {
            InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest = buildBodyParams();
            return createOneTimeChargeWithHttpInfo(companyDomain, customerUniqueId, invoiceCreateOneTimeChargeRequest);
        }

        /**
         * Execute createOneTimeCharge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Boolean> _callback) throws ApiException {
            InvoiceCreateOneTimeChargeRequest invoiceCreateOneTimeChargeRequest = buildBodyParams();
            return createOneTimeChargeAsync(companyDomain, customerUniqueId, invoiceCreateOneTimeChargeRequest, _callback);
        }
    }

    /**
     * Create a one-time charge
     * This query creates a one-time charge for an individual customer
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return CreateOneTimeChargeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateOneTimeChargeRequestBuilder createOneTimeCharge(String description, String currencyCode, Integer amount, String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (currencyCode == null) throw new IllegalArgumentException("\"currencyCode\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new CreateOneTimeChargeRequestBuilder(description, currencyCode, amount, companyDomain, customerUniqueId);
    }
    private okhttp3.Call createRefundCall(String companyDomain, String customerUniqueId, InvoiceCreateRefundRequest invoiceCreateRefundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceCreateRefundRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/refunds"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRefundValidateBeforeCall(String companyDomain, String customerUniqueId, InvoiceCreateRefundRequest invoiceCreateRefundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createRefund(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling createRefund(Async)");
        }

        return createRefundCall(companyDomain, customerUniqueId, invoiceCreateRefundRequest, _callback);

    }


    private ApiResponse<InvoiceCreateRefundResponse> createRefundWithHttpInfo(String companyDomain, String customerUniqueId, InvoiceCreateRefundRequest invoiceCreateRefundRequest) throws ApiException {
        okhttp3.Call localVarCall = createRefundValidateBeforeCall(companyDomain, customerUniqueId, invoiceCreateRefundRequest, null);
        Type localVarReturnType = new TypeToken<InvoiceCreateRefundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRefundAsync(String companyDomain, String customerUniqueId, InvoiceCreateRefundRequest invoiceCreateRefundRequest, final ApiCallback<InvoiceCreateRefundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRefundValidateBeforeCall(companyDomain, customerUniqueId, invoiceCreateRefundRequest, _callback);
        Type localVarReturnType = new TypeToken<InvoiceCreateRefundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRefundRequestBuilder {
        private final String invoiceNumber;
        private final Integer amount;
        private final String companyDomain;
        private final String customerUniqueId;

        private CreateRefundRequestBuilder(String invoiceNumber, Integer amount, String companyDomain, String customerUniqueId) {
            this.invoiceNumber = invoiceNumber;
            this.amount = amount;
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for createRefund
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvoiceCreateRefundRequest invoiceCreateRefundRequest = buildBodyParams();
            return createRefundCall(companyDomain, customerUniqueId, invoiceCreateRefundRequest, _callback);
        }

        private InvoiceCreateRefundRequest buildBodyParams() {
            InvoiceCreateRefundRequest invoiceCreateRefundRequest = new InvoiceCreateRefundRequest();
            invoiceCreateRefundRequest.invoiceNumber(this.invoiceNumber);
            invoiceCreateRefundRequest.amount(this.amount);
            return invoiceCreateRefundRequest;
        }

        /**
         * Execute createRefund request
         * @return InvoiceCreateRefundResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceCreateRefundResponse execute() throws ApiException {
            InvoiceCreateRefundRequest invoiceCreateRefundRequest = buildBodyParams();
            ApiResponse<InvoiceCreateRefundResponse> localVarResp = createRefundWithHttpInfo(companyDomain, customerUniqueId, invoiceCreateRefundRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRefund request with HTTP info returned
         * @return ApiResponse&lt;InvoiceCreateRefundResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceCreateRefundResponse> executeWithHttpInfo() throws ApiException {
            InvoiceCreateRefundRequest invoiceCreateRefundRequest = buildBodyParams();
            return createRefundWithHttpInfo(companyDomain, customerUniqueId, invoiceCreateRefundRequest);
        }

        /**
         * Execute createRefund request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceCreateRefundResponse> _callback) throws ApiException {
            InvoiceCreateRefundRequest invoiceCreateRefundRequest = buildBodyParams();
            return createRefundAsync(companyDomain, customerUniqueId, invoiceCreateRefundRequest, _callback);
        }
    }

    /**
     * Refund an invoice
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return CreateRefundRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateRefundRequestBuilder createRefund(String invoiceNumber, Integer amount, String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (invoiceNumber == null) throw new IllegalArgumentException("\"invoiceNumber\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new CreateRefundRequestBuilder(invoiceNumber, amount, companyDomain, customerUniqueId);
    }
    private okhttp3.Call detailsCall(String invoiceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{invoiceNumber}"
            .replace("{" + "invoiceNumber" + "}", localVarApiClient.escapeString(invoiceNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailsValidateBeforeCall(String invoiceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceNumber' is set
        if (invoiceNumber == null) {
            throw new ApiException("Missing the required parameter 'invoiceNumber' when calling details(Async)");
        }

        return detailsCall(invoiceNumber, _callback);

    }


    private ApiResponse<InvoiceDetailsResponse> detailsWithHttpInfo(String invoiceNumber) throws ApiException {
        okhttp3.Call localVarCall = detailsValidateBeforeCall(invoiceNumber, null);
        Type localVarReturnType = new TypeToken<InvoiceDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call detailsAsync(String invoiceNumber, final ApiCallback<InvoiceDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailsValidateBeforeCall(invoiceNumber, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DetailsRequestBuilder {
        private final String invoiceNumber;

        private DetailsRequestBuilder(String invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
        }

        /**
         * Build call for details
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return detailsCall(invoiceNumber, _callback);
        }


        /**
         * Execute details request
         * @return InvoiceDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceDetailsResponse execute() throws ApiException {
            ApiResponse<InvoiceDetailsResponse> localVarResp = detailsWithHttpInfo(invoiceNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute details request with HTTP info returned
         * @return ApiResponse&lt;InvoiceDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceDetailsResponse> executeWithHttpInfo() throws ApiException {
            return detailsWithHttpInfo(invoiceNumber);
        }

        /**
         * Execute details request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceDetailsResponse> _callback) throws ApiException {
            return detailsAsync(invoiceNumber, _callback);
        }
    }

    /**
     * Individual invoices
     * 
     * @param invoiceNumber The invoice number for the invoice you&#39;d like to retrieve (required)
     * @return DetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DetailsRequestBuilder details(String invoiceNumber) throws IllegalArgumentException {
        if (invoiceNumber == null) throw new IllegalArgumentException("\"invoiceNumber\" is required but got null");
            

        return new DetailsRequestBuilder(invoiceNumber);
    }
    private okhttp3.Call getCustomerInvoicesCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/invoices"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerInvoicesValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getCustomerInvoices(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling getCustomerInvoices(Async)");
        }

        return getCustomerInvoicesCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<List<InvoiceGetCustomerInvoicesResponseInner>> getCustomerInvoicesWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerInvoicesValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<List<InvoiceGetCustomerInvoicesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomerInvoicesAsync(String companyDomain, String customerUniqueId, final ApiCallback<List<InvoiceGetCustomerInvoicesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerInvoicesValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceGetCustomerInvoicesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomerInvoicesRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private GetCustomerInvoicesRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for getCustomerInvoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomerInvoicesCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute getCustomerInvoices request
         * @return List&lt;InvoiceGetCustomerInvoicesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<InvoiceGetCustomerInvoicesResponseInner> execute() throws ApiException {
            ApiResponse<List<InvoiceGetCustomerInvoicesResponseInner>> localVarResp = getCustomerInvoicesWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomerInvoices request with HTTP info returned
         * @return ApiResponse&lt;List&lt;InvoiceGetCustomerInvoicesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<InvoiceGetCustomerInvoicesResponseInner>> executeWithHttpInfo() throws ApiException {
            return getCustomerInvoicesWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute getCustomerInvoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<InvoiceGetCustomerInvoicesResponseInner>> _callback) throws ApiException {
            return getCustomerInvoicesAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Customer invoices
     * This query gets individual customer&#39;s invoices
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return GetCustomerInvoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerInvoicesRequestBuilder getCustomerInvoices(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new GetCustomerInvoicesRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call getPaymentLogsCall(String companyDomain, String customerUniqueId, String invoiceNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/invoices/{invoiceNumber}/paymentlogs"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()))
            .replace("{" + "invoiceNumber" + "}", localVarApiClient.escapeString(invoiceNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentLogsValidateBeforeCall(String companyDomain, String customerUniqueId, String invoiceNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getPaymentLogs(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling getPaymentLogs(Async)");
        }

        // verify the required parameter 'invoiceNumber' is set
        if (invoiceNumber == null) {
            throw new ApiException("Missing the required parameter 'invoiceNumber' when calling getPaymentLogs(Async)");
        }

        return getPaymentLogsCall(companyDomain, customerUniqueId, invoiceNumber, _callback);

    }


    private ApiResponse<List<InvoiceGetPaymentLogsResponseInner>> getPaymentLogsWithHttpInfo(String companyDomain, String customerUniqueId, String invoiceNumber) throws ApiException {
        okhttp3.Call localVarCall = getPaymentLogsValidateBeforeCall(companyDomain, customerUniqueId, invoiceNumber, null);
        Type localVarReturnType = new TypeToken<List<InvoiceGetPaymentLogsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaymentLogsAsync(String companyDomain, String customerUniqueId, String invoiceNumber, final ApiCallback<List<InvoiceGetPaymentLogsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentLogsValidateBeforeCall(companyDomain, customerUniqueId, invoiceNumber, _callback);
        Type localVarReturnType = new TypeToken<List<InvoiceGetPaymentLogsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaymentLogsRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;
        private final String invoiceNumber;

        private GetPaymentLogsRequestBuilder(String companyDomain, String customerUniqueId, String invoiceNumber) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
            this.invoiceNumber = invoiceNumber;
        }

        /**
         * Build call for getPaymentLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaymentLogsCall(companyDomain, customerUniqueId, invoiceNumber, _callback);
        }


        /**
         * Execute getPaymentLogs request
         * @return List&lt;InvoiceGetPaymentLogsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<InvoiceGetPaymentLogsResponseInner> execute() throws ApiException {
            ApiResponse<List<InvoiceGetPaymentLogsResponseInner>> localVarResp = getPaymentLogsWithHttpInfo(companyDomain, customerUniqueId, invoiceNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaymentLogs request with HTTP info returned
         * @return ApiResponse&lt;List&lt;InvoiceGetPaymentLogsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<InvoiceGetPaymentLogsResponseInner>> executeWithHttpInfo() throws ApiException {
            return getPaymentLogsWithHttpInfo(companyDomain, customerUniqueId, invoiceNumber);
        }

        /**
         * Execute getPaymentLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<InvoiceGetPaymentLogsResponseInner>> _callback) throws ApiException {
            return getPaymentLogsAsync(companyDomain, customerUniqueId, invoiceNumber, _callback);
        }
    }

    /**
     * Customer payment logs
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @param invoiceNumber The unique identifier of the invoice in the Billsby platform (required)
     * @return GetPaymentLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentLogsRequestBuilder getPaymentLogs(String companyDomain, String customerUniqueId, String invoiceNumber) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        if (invoiceNumber == null) throw new IllegalArgumentException("\"invoiceNumber\" is required but got null");
            

        return new GetPaymentLogsRequestBuilder(companyDomain, customerUniqueId, invoiceNumber);
    }
    private okhttp3.Call listCompanyInvoicesCall(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, String isUnpaid, Boolean isPaidOffline, Boolean isWrittenOff, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/companies/invoices"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (orderByDescending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderByDescending", orderByDescending));
        }

        if (isPending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPending", isPending));
        }

        if (isPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPaid", isPaid));
        }

        if (isUnpaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isUnpaid", isUnpaid));
        }

        if (isPaidOffline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPaidOffline", isPaidOffline));
        }

        if (isWrittenOff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isWrittenOff", isWrittenOff));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyInvoicesValidateBeforeCall(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, String isUnpaid, Boolean isPaidOffline, Boolean isWrittenOff, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listCompanyInvoices(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listCompanyInvoices(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listCompanyInvoices(Async)");
        }

        return listCompanyInvoicesCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isUnpaid, isPaidOffline, isWrittenOff, _callback);

    }


    private ApiResponse<String> listCompanyInvoicesWithHttpInfo(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, String isUnpaid, Boolean isPaidOffline, Boolean isWrittenOff) throws ApiException {
        okhttp3.Call localVarCall = listCompanyInvoicesValidateBeforeCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isUnpaid, isPaidOffline, isWrittenOff, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyInvoicesAsync(String companyDomain, Integer page, Integer pageSize, String query, String orderBy, String orderByDescending, Boolean isPending, Boolean isPaid, String isUnpaid, Boolean isPaidOffline, Boolean isWrittenOff, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyInvoicesValidateBeforeCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isUnpaid, isPaidOffline, isWrittenOff, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyInvoicesRequestBuilder {
        private final String companyDomain;
        private final Integer page;
        private final Integer pageSize;
        private String query;
        private String orderBy;
        private String orderByDescending;
        private Boolean isPending;
        private Boolean isPaid;
        private String isUnpaid;
        private Boolean isPaidOffline;
        private Boolean isWrittenOff;

        private ListCompanyInvoicesRequestBuilder(String companyDomain, Integer page, Integer pageSize) {
            this.companyDomain = companyDomain;
            this.page = page;
            this.pageSize = pageSize;
        }

        /**
         * Set query
         * @param query Add search terms here to filter results (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Sort the results by particular properties (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set orderByDescending
         * @param orderByDescending Sort the results by particular properties in descending order (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder orderByDescending(String orderByDescending) {
            this.orderByDescending = orderByDescending;
            return this;
        }
        
        /**
         * Set isPending
         * @param isPending Do you want to show invoices with the status &#39;pending&#39;; true or false (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder isPending(Boolean isPending) {
            this.isPending = isPending;
            return this;
        }
        
        /**
         * Set isPaid
         * @param isPaid Do you want to show invoices with the status &#39;paid&#39;; true or false (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder isPaid(Boolean isPaid) {
            this.isPaid = isPaid;
            return this;
        }
        
        /**
         * Set isUnpaid
         * @param isUnpaid Do you want to show invoices with the status &#39;unpaid&#39;; true or false (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder isUnpaid(String isUnpaid) {
            this.isUnpaid = isUnpaid;
            return this;
        }
        
        /**
         * Set isPaidOffline
         * @param isPaidOffline Do you want to show invoices with the status &#39;paid offline&#39;; true or false (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder isPaidOffline(Boolean isPaidOffline) {
            this.isPaidOffline = isPaidOffline;
            return this;
        }
        
        /**
         * Set isWrittenOff
         * @param isWrittenOff Do you want to show invoices with the status &#39;written off&#39;; true or false (optional)
         * @return ListCompanyInvoicesRequestBuilder
         */
        public ListCompanyInvoicesRequestBuilder isWrittenOff(Boolean isWrittenOff) {
            this.isWrittenOff = isWrittenOff;
            return this;
        }
        
        /**
         * Build call for listCompanyInvoices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyInvoicesCall(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isUnpaid, isPaidOffline, isWrittenOff, _callback);
        }


        /**
         * Execute listCompanyInvoices request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = listCompanyInvoicesWithHttpInfo(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isUnpaid, isPaidOffline, isWrittenOff);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyInvoices request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return listCompanyInvoicesWithHttpInfo(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isUnpaid, isPaidOffline, isWrittenOff);
        }

        /**
         * Execute listCompanyInvoices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return listCompanyInvoicesAsync(companyDomain, page, pageSize, query, orderBy, orderByDescending, isPending, isPaid, isUnpaid, isPaidOffline, isWrittenOff, _callback);
        }
    }

    /**
     * Company invoices
     * Get a list of your company&#39;s invoices
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param page The page of invoices you would like to view (required)
     * @param pageSize The number of records to return per page (max 100) (required)
     * @return ListCompanyInvoicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyInvoicesRequestBuilder listCompanyInvoices(String companyDomain, Integer page, Integer pageSize) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new ListCompanyInvoicesRequestBuilder(companyDomain, page, pageSize);
    }
    private okhttp3.Call markAsPaidOfflineCall(String invoiceNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/invoices/{invoiceNumber}/PaidOffline"
            .replace("{" + "invoiceNumber" + "}", localVarApiClient.escapeString(invoiceNumber.toString()))
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsPaidOfflineValidateBeforeCall(String invoiceNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceNumber' is set
        if (invoiceNumber == null) {
            throw new ApiException("Missing the required parameter 'invoiceNumber' when calling markAsPaidOffline(Async)");
        }

        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling markAsPaidOffline(Async)");
        }

        return markAsPaidOfflineCall(invoiceNumber, companyDomain, _callback);

    }


    private ApiResponse<String> markAsPaidOfflineWithHttpInfo(String invoiceNumber, String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = markAsPaidOfflineValidateBeforeCall(invoiceNumber, companyDomain, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markAsPaidOfflineAsync(String invoiceNumber, String companyDomain, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsPaidOfflineValidateBeforeCall(invoiceNumber, companyDomain, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkAsPaidOfflineRequestBuilder {
        private final String invoiceNumber;
        private final String companyDomain;

        private MarkAsPaidOfflineRequestBuilder(String invoiceNumber, String companyDomain) {
            this.invoiceNumber = invoiceNumber;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for markAsPaidOffline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAsPaidOfflineCall(invoiceNumber, companyDomain, _callback);
        }


        /**
         * Execute markAsPaidOffline request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = markAsPaidOfflineWithHttpInfo(invoiceNumber, companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markAsPaidOffline request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return markAsPaidOfflineWithHttpInfo(invoiceNumber, companyDomain);
        }

        /**
         * Execute markAsPaidOffline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return markAsPaidOfflineAsync(invoiceNumber, companyDomain, _callback);
        }
    }

    /**
     * Invoice paid offline
     * Mark an invoice as paid offline
     * @param invoiceNumber The unique identifier of the invoice in the Billsby platform (required)
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return MarkAsPaidOfflineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public MarkAsPaidOfflineRequestBuilder markAsPaidOffline(String invoiceNumber, String companyDomain) throws IllegalArgumentException {
        if (invoiceNumber == null) throw new IllegalArgumentException("\"invoiceNumber\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new MarkAsPaidOfflineRequestBuilder(invoiceNumber, companyDomain);
    }
    private okhttp3.Call markWrittenOffCall(String invoiceNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/invoices/{invoiceNumber}/WrittenOff"
            .replace("{" + "invoiceNumber" + "}", localVarApiClient.escapeString(invoiceNumber.toString()))
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markWrittenOffValidateBeforeCall(String invoiceNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceNumber' is set
        if (invoiceNumber == null) {
            throw new ApiException("Missing the required parameter 'invoiceNumber' when calling markWrittenOff(Async)");
        }

        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling markWrittenOff(Async)");
        }

        return markWrittenOffCall(invoiceNumber, companyDomain, _callback);

    }


    private ApiResponse<String> markWrittenOffWithHttpInfo(String invoiceNumber, String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = markWrittenOffValidateBeforeCall(invoiceNumber, companyDomain, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markWrittenOffAsync(String invoiceNumber, String companyDomain, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = markWrittenOffValidateBeforeCall(invoiceNumber, companyDomain, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkWrittenOffRequestBuilder {
        private final String invoiceNumber;
        private final String companyDomain;

        private MarkWrittenOffRequestBuilder(String invoiceNumber, String companyDomain) {
            this.invoiceNumber = invoiceNumber;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for markWrittenOff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markWrittenOffCall(invoiceNumber, companyDomain, _callback);
        }


        /**
         * Execute markWrittenOff request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = markWrittenOffWithHttpInfo(invoiceNumber, companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markWrittenOff request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return markWrittenOffWithHttpInfo(invoiceNumber, companyDomain);
        }

        /**
         * Execute markWrittenOff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return markWrittenOffAsync(invoiceNumber, companyDomain, _callback);
        }
    }

    /**
     * Invoice written off
     * Mark an invoice as written off
     * @param invoiceNumber The unique identifier of the invoice in the Billsby platform (required)
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return MarkWrittenOffRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public MarkWrittenOffRequestBuilder markWrittenOff(String invoiceNumber, String companyDomain) throws IllegalArgumentException {
        if (invoiceNumber == null) throw new IllegalArgumentException("\"invoiceNumber\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new MarkWrittenOffRequestBuilder(invoiceNumber, companyDomain);
    }
    private okhttp3.Call reattemptPaymentCall(String invoiceNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/invoices/{invoiceNumber}/Payment"
            .replace("{" + "invoiceNumber" + "}", localVarApiClient.escapeString(invoiceNumber.toString()))
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reattemptPaymentValidateBeforeCall(String invoiceNumber, String companyDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceNumber' is set
        if (invoiceNumber == null) {
            throw new ApiException("Missing the required parameter 'invoiceNumber' when calling reattemptPayment(Async)");
        }

        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling reattemptPayment(Async)");
        }

        return reattemptPaymentCall(invoiceNumber, companyDomain, _callback);

    }


    private ApiResponse<String> reattemptPaymentWithHttpInfo(String invoiceNumber, String companyDomain) throws ApiException {
        okhttp3.Call localVarCall = reattemptPaymentValidateBeforeCall(invoiceNumber, companyDomain, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reattemptPaymentAsync(String invoiceNumber, String companyDomain, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = reattemptPaymentValidateBeforeCall(invoiceNumber, companyDomain, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReattemptPaymentRequestBuilder {
        private final String invoiceNumber;
        private final String companyDomain;

        private ReattemptPaymentRequestBuilder(String invoiceNumber, String companyDomain) {
            this.invoiceNumber = invoiceNumber;
            this.companyDomain = companyDomain;
        }

        /**
         * Build call for reattemptPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reattemptPaymentCall(invoiceNumber, companyDomain, _callback);
        }


        /**
         * Execute reattemptPayment request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = reattemptPaymentWithHttpInfo(invoiceNumber, companyDomain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reattemptPayment request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return reattemptPaymentWithHttpInfo(invoiceNumber, companyDomain);
        }

        /**
         * Execute reattemptPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return reattemptPaymentAsync(invoiceNumber, companyDomain, _callback);
        }
    }

    /**
     * Reattempt invoice payment
     * 
     * @param invoiceNumber The unique identifier of the invoice in the Billsby platform (required)
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return ReattemptPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ReattemptPaymentRequestBuilder reattemptPayment(String invoiceNumber, String companyDomain) throws IllegalArgumentException {
        if (invoiceNumber == null) throw new IllegalArgumentException("\"invoiceNumber\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new ReattemptPaymentRequestBuilder(invoiceNumber, companyDomain);
    }
}

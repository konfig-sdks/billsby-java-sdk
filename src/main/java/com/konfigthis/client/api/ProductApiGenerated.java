/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProductCreateCycleRequest;
import com.konfigthis.client.model.ProductCreateCycleRequestAddonPlanInputModelsInner;
import com.konfigthis.client.model.ProductCreateCycleRequestAllowancePlanInputModelInner;
import com.konfigthis.client.model.ProductCreateCycleRequestCyclesInputModelInner;
import com.konfigthis.client.model.ProductCreateCycleResponseInner;
import com.konfigthis.client.model.ProductCreateNewProductRequest;
import com.konfigthis.client.model.ProductCreateNewProductResponse;
import com.konfigthis.client.model.ProductCreatePlanRequest;
import com.konfigthis.client.model.ProductCreatePlanResponse;
import com.konfigthis.client.model.ProductGetDetailsResponse;
import com.konfigthis.client.model.ProductListPlansResponseInner;
import com.konfigthis.client.model.ProductListProductsResponse;
import com.konfigthis.client.model.ProductUpdatePlanAndCycleRequest;
import com.konfigthis.client.model.ProductUpdatePlanAndCycleRequestCycles;
import com.konfigthis.client.model.ProductUpdatePlanOrderRequest;
import com.konfigthis.client.model.ProductUpdateProductRequest;
import com.konfigthis.client.model.ProductUpdateProductRequestOrderedCustomFields;
import com.konfigthis.client.model.ProductUpdateProductRequestProductCountryLimitations;
import com.konfigthis.client.model.ProductUpdateProductResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"ApiKey\" is required but no API key was provided. Please set \"ApiKey\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCycleCall(String companyDomain, Integer productId, Integer planId, ProductCreateCycleRequest productCreateCycleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreateCycleRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products/{productId}/plans/{planId}/cycles"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCycleValidateBeforeCall(String companyDomain, Integer productId, Integer planId, ProductCreateCycleRequest productCreateCycleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createCycle(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling createCycle(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling createCycle(Async)");
        }

        return createCycleCall(companyDomain, productId, planId, productCreateCycleRequest, _callback);

    }


    private ApiResponse<List<ProductCreateCycleResponseInner>> createCycleWithHttpInfo(String companyDomain, Integer productId, Integer planId, ProductCreateCycleRequest productCreateCycleRequest) throws ApiException {
        okhttp3.Call localVarCall = createCycleValidateBeforeCall(companyDomain, productId, planId, productCreateCycleRequest, null);
        Type localVarReturnType = new TypeToken<List<ProductCreateCycleResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCycleAsync(String companyDomain, Integer productId, Integer planId, ProductCreateCycleRequest productCreateCycleRequest, final ApiCallback<List<ProductCreateCycleResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCycleValidateBeforeCall(companyDomain, productId, planId, productCreateCycleRequest, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCreateCycleResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCycleRequestBuilder {
        private final List<ProductCreateCycleRequestCyclesInputModelInner> cyclesInputModel;
        private final List<ProductCreateCycleRequestAddonPlanInputModelsInner> addonPlanInputModels;
        private final String companyDomain;
        private final Integer productId;
        private final Integer planId;
        private List<ProductCreateCycleRequestAllowancePlanInputModelInner> allowancePlanInputModel;

        private CreateCycleRequestBuilder(List<ProductCreateCycleRequestCyclesInputModelInner> cyclesInputModel, List<ProductCreateCycleRequestAddonPlanInputModelsInner> addonPlanInputModels, String companyDomain, Integer productId, Integer planId) {
            this.cyclesInputModel = cyclesInputModel;
            this.addonPlanInputModels = addonPlanInputModels;
            this.companyDomain = companyDomain;
            this.productId = productId;
            this.planId = planId;
        }

        /**
         * Set allowancePlanInputModel
         * @param allowancePlanInputModel Define attached allowances (optional)
         * @return CreateCycleRequestBuilder
         */
        public CreateCycleRequestBuilder allowancePlanInputModel(List<ProductCreateCycleRequestAllowancePlanInputModelInner> allowancePlanInputModel) {
            this.allowancePlanInputModel = allowancePlanInputModel;
            return this;
        }
        
        /**
         * Build call for createCycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductCreateCycleRequest productCreateCycleRequest = buildBodyParams();
            return createCycleCall(companyDomain, productId, planId, productCreateCycleRequest, _callback);
        }

        private ProductCreateCycleRequest buildBodyParams() {
            ProductCreateCycleRequest productCreateCycleRequest = new ProductCreateCycleRequest();
            productCreateCycleRequest.cyclesInputModel(this.cyclesInputModel);
            productCreateCycleRequest.addonPlanInputModels(this.addonPlanInputModels);
            productCreateCycleRequest.allowancePlanInputModel(this.allowancePlanInputModel);
            return productCreateCycleRequest;
        }

        /**
         * Execute createCycle request
         * @return List&lt;ProductCreateCycleResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<ProductCreateCycleResponseInner> execute() throws ApiException {
            ProductCreateCycleRequest productCreateCycleRequest = buildBodyParams();
            ApiResponse<List<ProductCreateCycleResponseInner>> localVarResp = createCycleWithHttpInfo(companyDomain, productId, planId, productCreateCycleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCycle request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProductCreateCycleResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProductCreateCycleResponseInner>> executeWithHttpInfo() throws ApiException {
            ProductCreateCycleRequest productCreateCycleRequest = buildBodyParams();
            return createCycleWithHttpInfo(companyDomain, productId, planId, productCreateCycleRequest);
        }

        /**
         * Execute createCycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProductCreateCycleResponseInner>> _callback) throws ApiException {
            ProductCreateCycleRequest productCreateCycleRequest = buildBodyParams();
            return createCycleAsync(companyDomain, productId, planId, productCreateCycleRequest, _callback);
        }
    }

    /**
     * Create a cycle
     * Create a cycle for a specific plan
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param productId The unique identifier of the product in the Billsby platform (required)
     * @param planId The unique identifier of the plan in the Billsby platform (required)
     * @return CreateCycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateCycleRequestBuilder createCycle(List<ProductCreateCycleRequestCyclesInputModelInner> cyclesInputModel, List<ProductCreateCycleRequestAddonPlanInputModelsInner> addonPlanInputModels, String companyDomain, Integer productId, Integer planId) throws IllegalArgumentException {
        if (cyclesInputModel == null) throw new IllegalArgumentException("\"cyclesInputModel\" is required but got null");
        if (addonPlanInputModels == null) throw new IllegalArgumentException("\"addonPlanInputModels\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
        if (planId == null) throw new IllegalArgumentException("\"planId\" is required but got null");
        return new CreateCycleRequestBuilder(cyclesInputModel, addonPlanInputModels, companyDomain, productId, planId);
    }
    private okhttp3.Call createNewProductCall(String companyDomain, ProductCreateNewProductRequest productCreateNewProductRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreateNewProductRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewProductValidateBeforeCall(String companyDomain, ProductCreateNewProductRequest productCreateNewProductRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createNewProduct(Async)");
        }

        return createNewProductCall(companyDomain, productCreateNewProductRequest, _callback);

    }


    private ApiResponse<ProductCreateNewProductResponse> createNewProductWithHttpInfo(String companyDomain, ProductCreateNewProductRequest productCreateNewProductRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewProductValidateBeforeCall(companyDomain, productCreateNewProductRequest, null);
        Type localVarReturnType = new TypeToken<ProductCreateNewProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewProductAsync(String companyDomain, ProductCreateNewProductRequest productCreateNewProductRequest, final ApiCallback<ProductCreateNewProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewProductValidateBeforeCall(companyDomain, productCreateNewProductRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductCreateNewProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewProductRequestBuilder {
        private final String companyDomain;
        private String description;
        private String name;
        private Integer visibility;
        private String billingCurrency;
        private String displayName;
        private Boolean isShippingAddressRequired;
        private Boolean isShippingAddressValidationRequired;
        private Boolean isBillingAddressValidationRequired;
        private Boolean isAdditionalEmailRequired;
        private Boolean isPhoneNumberRequired;
        private Boolean isMarketingConsentRequired;
        private String alertEmail;
        private ProductUpdateProductRequestOrderedCustomFields orderedCustomFields;
        private Integer typeOfProduct;
        private ProductUpdateProductRequestProductCountryLimitations productCountryLimitation;
        private Boolean isAnyCountryAllowed;

        private CreateNewProductRequestBuilder(String companyDomain) {
            this.companyDomain = companyDomain;
        }

        /**
         * Set description
         * @param description A short description of the product (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The internal name of the product you want to create (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility The type of visibility of each product; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public&#x3D;0, Hidden&#x3D;1, Internal&#x3D;2, OffSale&#x3D;3) (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder visibility(Integer visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set billingCurrency
         * @param billingCurrency The currency you want to the product to be billed in. This must be an ISO3 currency code with maximum three characters. For example: GBP, USD, etc. (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder billingCurrency(String billingCurrency) {
            this.billingCurrency = billingCurrency;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName The display name of the product you want to create (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set isShippingAddressRequired
         * @param isShippingAddressRequired Do you need to collect a shipping address from your customers for this product; true or false (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder isShippingAddressRequired(Boolean isShippingAddressRequired) {
            this.isShippingAddressRequired = isShippingAddressRequired;
            return this;
        }
        
        /**
         * Set isShippingAddressValidationRequired
         * @param isShippingAddressValidationRequired Do you want to validate the shipping address using our tool; true or false (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder isShippingAddressValidationRequired(Boolean isShippingAddressValidationRequired) {
            this.isShippingAddressValidationRequired = isShippingAddressValidationRequired;
            return this;
        }
        
        /**
         * Set isBillingAddressValidationRequired
         * @param isBillingAddressValidationRequired Do you want to validate the billing address using our tool; true or false (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder isBillingAddressValidationRequired(Boolean isBillingAddressValidationRequired) {
            this.isBillingAddressValidationRequired = isBillingAddressValidationRequired;
            return this;
        }
        
        /**
         * Set isAdditionalEmailRequired
         * @param isAdditionalEmailRequired Do you want to collect an additional email address from your customers at checkout; true or false (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder isAdditionalEmailRequired(Boolean isAdditionalEmailRequired) {
            this.isAdditionalEmailRequired = isAdditionalEmailRequired;
            return this;
        }
        
        /**
         * Set isPhoneNumberRequired
         * @param isPhoneNumberRequired Do you need to collect a phone number from your customers at checkout; true or false (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder isPhoneNumberRequired(Boolean isPhoneNumberRequired) {
            this.isPhoneNumberRequired = isPhoneNumberRequired;
            return this;
        }
        
        /**
         * Set isMarketingConsentRequired
         * @param isMarketingConsentRequired Do you need to get marketing consent from your customers at checkout; true or false (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder isMarketingConsentRequired(Boolean isMarketingConsentRequired) {
            this.isMarketingConsentRequired = isMarketingConsentRequired;
            return this;
        }
        
        /**
         * Set alertEmail
         * @param alertEmail Set an email to be alerted when a customer signs up for this product (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder alertEmail(String alertEmail) {
            this.alertEmail = alertEmail;
            return this;
        }
        
        /**
         * Set orderedCustomFields
         * @param orderedCustomFields  (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder orderedCustomFields(ProductUpdateProductRequestOrderedCustomFields orderedCustomFields) {
            this.orderedCustomFields = orderedCustomFields;
            return this;
        }
        
        /**
         * Set typeOfProduct
         * @param typeOfProduct The type of product you want to create; 1 is tiered (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder typeOfProduct(Integer typeOfProduct) {
            this.typeOfProduct = typeOfProduct;
            return this;
        }
        
        /**
         * Set productCountryLimitation
         * @param productCountryLimitation  (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder productCountryLimitation(ProductUpdateProductRequestProductCountryLimitations productCountryLimitation) {
            this.productCountryLimitation = productCountryLimitation;
            return this;
        }
        
        /**
         * Set isAnyCountryAllowed
         * @param isAnyCountryAllowed Do you want to allow any country allowed access to the product; true or false (optional)
         * @return CreateNewProductRequestBuilder
         */
        public CreateNewProductRequestBuilder isAnyCountryAllowed(Boolean isAnyCountryAllowed) {
            this.isAnyCountryAllowed = isAnyCountryAllowed;
            return this;
        }
        
        /**
         * Build call for createNewProduct
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductCreateNewProductRequest productCreateNewProductRequest = buildBodyParams();
            return createNewProductCall(companyDomain, productCreateNewProductRequest, _callback);
        }

        private ProductCreateNewProductRequest buildBodyParams() {
            ProductCreateNewProductRequest productCreateNewProductRequest = new ProductCreateNewProductRequest();
            productCreateNewProductRequest.description(this.description);
            productCreateNewProductRequest.name(this.name);
            productCreateNewProductRequest.visibility(this.visibility);
            productCreateNewProductRequest.billingCurrency(this.billingCurrency);
            productCreateNewProductRequest.displayName(this.displayName);
            productCreateNewProductRequest.isShippingAddressRequired(this.isShippingAddressRequired);
            productCreateNewProductRequest.isShippingAddressValidationRequired(this.isShippingAddressValidationRequired);
            productCreateNewProductRequest.isBillingAddressValidationRequired(this.isBillingAddressValidationRequired);
            productCreateNewProductRequest.isAdditionalEmailRequired(this.isAdditionalEmailRequired);
            productCreateNewProductRequest.isPhoneNumberRequired(this.isPhoneNumberRequired);
            productCreateNewProductRequest.isMarketingConsentRequired(this.isMarketingConsentRequired);
            productCreateNewProductRequest.alertEmail(this.alertEmail);
            productCreateNewProductRequest.orderedCustomFields(this.orderedCustomFields);
            productCreateNewProductRequest.typeOfProduct(this.typeOfProduct);
            productCreateNewProductRequest.productCountryLimitation(this.productCountryLimitation);
            productCreateNewProductRequest.isAnyCountryAllowed(this.isAnyCountryAllowed);
            return productCreateNewProductRequest;
        }

        /**
         * Execute createNewProduct request
         * @return ProductCreateNewProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ProductCreateNewProductResponse execute() throws ApiException {
            ProductCreateNewProductRequest productCreateNewProductRequest = buildBodyParams();
            ApiResponse<ProductCreateNewProductResponse> localVarResp = createNewProductWithHttpInfo(companyDomain, productCreateNewProductRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewProduct request with HTTP info returned
         * @return ApiResponse&lt;ProductCreateNewProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProductCreateNewProductResponse> executeWithHttpInfo() throws ApiException {
            ProductCreateNewProductRequest productCreateNewProductRequest = buildBodyParams();
            return createNewProductWithHttpInfo(companyDomain, productCreateNewProductRequest);
        }

        /**
         * Execute createNewProduct request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProductCreateNewProductResponse> _callback) throws ApiException {
            ProductCreateNewProductRequest productCreateNewProductRequest = buildBodyParams();
            return createNewProductAsync(companyDomain, productCreateNewProductRequest, _callback);
        }
    }

    /**
     * Create a product
     * Create a new product for your company
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return CreateNewProductRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewProductRequestBuilder createNewProduct(String companyDomain) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new CreateNewProductRequestBuilder(companyDomain);
    }
    private okhttp3.Call createPlanCall(String companyDomain, Integer productId, ProductCreatePlanRequest productCreatePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreatePlanRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products/{productId}/plans"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPlanValidateBeforeCall(String companyDomain, Integer productId, ProductCreatePlanRequest productCreatePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createPlan(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling createPlan(Async)");
        }

        return createPlanCall(companyDomain, productId, productCreatePlanRequest, _callback);

    }


    private ApiResponse<ProductCreatePlanResponse> createPlanWithHttpInfo(String companyDomain, Integer productId, ProductCreatePlanRequest productCreatePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = createPlanValidateBeforeCall(companyDomain, productId, productCreatePlanRequest, null);
        Type localVarReturnType = new TypeToken<ProductCreatePlanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPlanAsync(String companyDomain, Integer productId, ProductCreatePlanRequest productCreatePlanRequest, final ApiCallback<ProductCreatePlanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPlanValidateBeforeCall(companyDomain, productId, productCreatePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductCreatePlanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePlanRequestBuilder {
        private final String companyDomain;
        private final Integer productId;
        private String description;
        private String name;
        private String displayName;
        private Integer pricingModel;
        private String featureTags;
        private Integer visibility;
        private String redirectUrl;
        private String alertEmail;

        private CreatePlanRequestBuilder(String companyDomain, Integer productId) {
            this.companyDomain = companyDomain;
            this.productId = productId;
        }

        /**
         * Set description
         * @param description The description of the plan (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the plan you want to add (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName The display name of the plan (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set pricingModel
         * @param pricingModel The type of pricing model for the plan; FlatFee &#x3D; 1, PerUnit &#x3D; 2, Reserved &#x3D; 3, Tiered &#x3D; 4, Volume &#x3D; 5, Ranged &#x3D; 6 (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder pricingModel(Integer pricingModel) {
            this.pricingModel = pricingModel;
            return this;
        }
        
        /**
         * Set featureTags
         * @param featureTags Any feature tags you want to add to the plan (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder featureTags(String featureTags) {
            this.featureTags = featureTags;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility The type of visibility of each plan; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public&#x3D;0, Hidden&#x3D;1, Internal&#x3D;2, OffSale&#x3D;3) (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder visibility(Integer visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set redirectUrl
         * @param redirectUrl The URL you want to redirect your customers to when they have completed the checkout flow (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder redirectUrl(String redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        /**
         * Set alertEmail
         * @param alertEmail The email you would like to receive an alert when a customer signs up for this plan (optional)
         * @return CreatePlanRequestBuilder
         */
        public CreatePlanRequestBuilder alertEmail(String alertEmail) {
            this.alertEmail = alertEmail;
            return this;
        }
        
        /**
         * Build call for createPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductCreatePlanRequest productCreatePlanRequest = buildBodyParams();
            return createPlanCall(companyDomain, productId, productCreatePlanRequest, _callback);
        }

        private ProductCreatePlanRequest buildBodyParams() {
            ProductCreatePlanRequest productCreatePlanRequest = new ProductCreatePlanRequest();
            productCreatePlanRequest.description(this.description);
            productCreatePlanRequest.name(this.name);
            productCreatePlanRequest.displayName(this.displayName);
            productCreatePlanRequest.pricingModel(this.pricingModel);
            productCreatePlanRequest.featureTags(this.featureTags);
            productCreatePlanRequest.visibility(this.visibility);
            productCreatePlanRequest.redirectUrl(this.redirectUrl);
            productCreatePlanRequest.alertEmail(this.alertEmail);
            return productCreatePlanRequest;
        }

        /**
         * Execute createPlan request
         * @return ProductCreatePlanResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ProductCreatePlanResponse execute() throws ApiException {
            ProductCreatePlanRequest productCreatePlanRequest = buildBodyParams();
            ApiResponse<ProductCreatePlanResponse> localVarResp = createPlanWithHttpInfo(companyDomain, productId, productCreatePlanRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPlan request with HTTP info returned
         * @return ApiResponse&lt;ProductCreatePlanResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProductCreatePlanResponse> executeWithHttpInfo() throws ApiException {
            ProductCreatePlanRequest productCreatePlanRequest = buildBodyParams();
            return createPlanWithHttpInfo(companyDomain, productId, productCreatePlanRequest);
        }

        /**
         * Execute createPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProductCreatePlanResponse> _callback) throws ApiException {
            ProductCreatePlanRequest productCreatePlanRequest = buildBodyParams();
            return createPlanAsync(companyDomain, productId, productCreatePlanRequest, _callback);
        }
    }

    /**
     * Create a plan
     * Create a new plan for a specific product
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param productId The unique identifier of the product in the Billsby platform (required)
     * @return CreatePlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreatePlanRequestBuilder createPlan(String companyDomain, Integer productId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
        return new CreatePlanRequestBuilder(companyDomain, productId);
    }
    private okhttp3.Call getDetailsCall(String companyDomain, Integer productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products/{productId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String companyDomain, Integer productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDetails(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getDetails(Async)");
        }

        return getDetailsCall(companyDomain, productId, _callback);

    }


    private ApiResponse<ProductGetDetailsResponse> getDetailsWithHttpInfo(String companyDomain, Integer productId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyDomain, productId, null);
        Type localVarReturnType = new TypeToken<ProductGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String companyDomain, Integer productId, final ApiCallback<ProductGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyDomain, productId, _callback);
        Type localVarReturnType = new TypeToken<ProductGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String companyDomain;
        private final Integer productId;

        private GetDetailsRequestBuilder(String companyDomain, Integer productId) {
            this.companyDomain = companyDomain;
            this.productId = productId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(companyDomain, productId, _callback);
        }


        /**
         * Execute getDetails request
         * @return ProductGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ProductGetDetailsResponse execute() throws ApiException {
            ApiResponse<ProductGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(companyDomain, productId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;ProductGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProductGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(companyDomain, productId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProductGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(companyDomain, productId, _callback);
        }
    }

    /**
     * Product details
     * Get the details of a specific product
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param productId The unique identifier of the product in the Billsby platform (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String companyDomain, Integer productId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
        return new GetDetailsRequestBuilder(companyDomain, productId);
    }
    private okhttp3.Call listPlansCall(String companyDomain, Integer productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products/{productId}/plans"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPlansValidateBeforeCall(String companyDomain, Integer productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listPlans(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling listPlans(Async)");
        }

        return listPlansCall(companyDomain, productId, _callback);

    }


    private ApiResponse<List<ProductListPlansResponseInner>> listPlansWithHttpInfo(String companyDomain, Integer productId) throws ApiException {
        okhttp3.Call localVarCall = listPlansValidateBeforeCall(companyDomain, productId, null);
        Type localVarReturnType = new TypeToken<List<ProductListPlansResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPlansAsync(String companyDomain, Integer productId, final ApiCallback<List<ProductListPlansResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPlansValidateBeforeCall(companyDomain, productId, _callback);
        Type localVarReturnType = new TypeToken<List<ProductListPlansResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPlansRequestBuilder {
        private final String companyDomain;
        private final Integer productId;

        private ListPlansRequestBuilder(String companyDomain, Integer productId) {
            this.companyDomain = companyDomain;
            this.productId = productId;
        }

        /**
         * Build call for listPlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPlansCall(companyDomain, productId, _callback);
        }


        /**
         * Execute listPlans request
         * @return List&lt;ProductListPlansResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<ProductListPlansResponseInner> execute() throws ApiException {
            ApiResponse<List<ProductListPlansResponseInner>> localVarResp = listPlansWithHttpInfo(companyDomain, productId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPlans request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProductListPlansResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProductListPlansResponseInner>> executeWithHttpInfo() throws ApiException {
            return listPlansWithHttpInfo(companyDomain, productId);
        }

        /**
         * Execute listPlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProductListPlansResponseInner>> _callback) throws ApiException {
            return listPlansAsync(companyDomain, productId, _callback);
        }
    }

    /**
     * List plans
     * Get a list of plans associated with a specific product
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param productId The unique identifier of the product in the Billsby platform (required)
     * @return ListPlansRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListPlansRequestBuilder listPlans(String companyDomain, Integer productId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
        return new ListPlansRequestBuilder(companyDomain, productId);
    }
    private okhttp3.Call listProductsCall(String companyDomain, Integer page, Integer pageSize, String search, Integer visibilityType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (visibilityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibilityType", visibilityType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductsValidateBeforeCall(String companyDomain, Integer page, Integer pageSize, String search, Integer visibilityType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listProducts(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listProducts(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listProducts(Async)");
        }

        return listProductsCall(companyDomain, page, pageSize, search, visibilityType, _callback);

    }


    private ApiResponse<ProductListProductsResponse> listProductsWithHttpInfo(String companyDomain, Integer page, Integer pageSize, String search, Integer visibilityType) throws ApiException {
        okhttp3.Call localVarCall = listProductsValidateBeforeCall(companyDomain, page, pageSize, search, visibilityType, null);
        Type localVarReturnType = new TypeToken<ProductListProductsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listProductsAsync(String companyDomain, Integer page, Integer pageSize, String search, Integer visibilityType, final ApiCallback<ProductListProductsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductsValidateBeforeCall(companyDomain, page, pageSize, search, visibilityType, _callback);
        Type localVarReturnType = new TypeToken<ProductListProductsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListProductsRequestBuilder {
        private final String companyDomain;
        private final Integer page;
        private final Integer pageSize;
        private String search;
        private Integer visibilityType;

        private ListProductsRequestBuilder(String companyDomain, Integer page, Integer pageSize) {
            this.companyDomain = companyDomain;
            this.page = page;
            this.pageSize = pageSize;
        }

        /**
         * Set search
         * @param search Filter products by name (this can be a partial name) (optional)
         * @return ListProductsRequestBuilder
         */
        public ListProductsRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set visibilityType
         * @param visibilityType The type of visibility of each product; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public&#x3D;0, Hidden&#x3D;1, Internal&#x3D;2, OffSale&#x3D;3) (optional)
         * @return ListProductsRequestBuilder
         */
        public ListProductsRequestBuilder visibilityType(Integer visibilityType) {
            this.visibilityType = visibilityType;
            return this;
        }
        
        /**
         * Build call for listProducts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listProductsCall(companyDomain, page, pageSize, search, visibilityType, _callback);
        }


        /**
         * Execute listProducts request
         * @return ProductListProductsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ProductListProductsResponse execute() throws ApiException {
            ApiResponse<ProductListProductsResponse> localVarResp = listProductsWithHttpInfo(companyDomain, page, pageSize, search, visibilityType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listProducts request with HTTP info returned
         * @return ApiResponse&lt;ProductListProductsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProductListProductsResponse> executeWithHttpInfo() throws ApiException {
            return listProductsWithHttpInfo(companyDomain, page, pageSize, search, visibilityType);
        }

        /**
         * Execute listProducts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProductListProductsResponse> _callback) throws ApiException {
            return listProductsAsync(companyDomain, page, pageSize, search, visibilityType, _callback);
        }
    }

    /**
     * List products
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param page The number of the page you would like to return (required)
     * @param pageSize The number of entries per page you would like to return (required)
     * @return ListProductsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListProductsRequestBuilder listProducts(String companyDomain, Integer page, Integer pageSize) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new ListProductsRequestBuilder(companyDomain, page, pageSize);
    }
    private okhttp3.Call updatePlanAndCycleCall(String companyDomain, Integer productId, Integer planId, ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productUpdatePlanAndCycleRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products/{productId}/plans/{planId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlanAndCycleValidateBeforeCall(String companyDomain, Integer productId, Integer planId, ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updatePlanAndCycle(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updatePlanAndCycle(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling updatePlanAndCycle(Async)");
        }

        return updatePlanAndCycleCall(companyDomain, productId, planId, productUpdatePlanAndCycleRequest, _callback);

    }


    private ApiResponse<String> updatePlanAndCycleWithHttpInfo(String companyDomain, Integer productId, Integer planId, ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePlanAndCycleValidateBeforeCall(companyDomain, productId, planId, productUpdatePlanAndCycleRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlanAndCycleAsync(String companyDomain, Integer productId, Integer planId, ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlanAndCycleValidateBeforeCall(companyDomain, productId, planId, productUpdatePlanAndCycleRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlanAndCycleRequestBuilder {
        private final String companyDomain;
        private final Integer productId;
        private final Integer planId;
        private String description;
        private String name;
        private String displayName;
        private String featureTags;
        private Integer visibility;
        private ProductUpdatePlanAndCycleRequestCycles cycles;
        private String redirectUrl;
        private String alertEmail;

        private UpdatePlanAndCycleRequestBuilder(String companyDomain, Integer productId, Integer planId) {
            this.companyDomain = companyDomain;
            this.productId = productId;
            this.planId = planId;
        }

        /**
         * Set description
         * @param description The description of the plan (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the plan you want to update (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName The display name of the plan you want to update (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set featureTags
         * @param featureTags The feature tags associated with the plan (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder featureTags(String featureTags) {
            this.featureTags = featureTags;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility The visibility of the plan (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder visibility(Integer visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set cycles
         * @param cycles  (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder cycles(ProductUpdatePlanAndCycleRequestCycles cycles) {
            this.cycles = cycles;
            return this;
        }
        
        /**
         * Set redirectUrl
         * @param redirectUrl The URL you want your customer to redirected to when they have completed the checkout flow (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder redirectUrl(String redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }
        
        /**
         * Set alertEmail
         * @param alertEmail Set up an email to receive alerts when a customer signs up for the plan (optional)
         * @return UpdatePlanAndCycleRequestBuilder
         */
        public UpdatePlanAndCycleRequestBuilder alertEmail(String alertEmail) {
            this.alertEmail = alertEmail;
            return this;
        }
        
        /**
         * Build call for updatePlanAndCycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest = buildBodyParams();
            return updatePlanAndCycleCall(companyDomain, productId, planId, productUpdatePlanAndCycleRequest, _callback);
        }

        private ProductUpdatePlanAndCycleRequest buildBodyParams() {
            ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest = new ProductUpdatePlanAndCycleRequest();
            productUpdatePlanAndCycleRequest.description(this.description);
            productUpdatePlanAndCycleRequest.name(this.name);
            productUpdatePlanAndCycleRequest.displayName(this.displayName);
            productUpdatePlanAndCycleRequest.featureTags(this.featureTags);
            productUpdatePlanAndCycleRequest.visibility(this.visibility);
            productUpdatePlanAndCycleRequest.cycles(this.cycles);
            productUpdatePlanAndCycleRequest.redirectUrl(this.redirectUrl);
            productUpdatePlanAndCycleRequest.alertEmail(this.alertEmail);
            return productUpdatePlanAndCycleRequest;
        }

        /**
         * Execute updatePlanAndCycle request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest = buildBodyParams();
            ApiResponse<String> localVarResp = updatePlanAndCycleWithHttpInfo(companyDomain, productId, planId, productUpdatePlanAndCycleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlanAndCycle request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest = buildBodyParams();
            return updatePlanAndCycleWithHttpInfo(companyDomain, productId, planId, productUpdatePlanAndCycleRequest);
        }

        /**
         * Execute updatePlanAndCycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            ProductUpdatePlanAndCycleRequest productUpdatePlanAndCycleRequest = buildBodyParams();
            return updatePlanAndCycleAsync(companyDomain, productId, planId, productUpdatePlanAndCycleRequest, _callback);
        }
    }

    /**
     * Update a plan and cycle
     * Update a plan and cycle for your company
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param productId The unique identifier of the product in the Billsby platform (required)
     * @param planId The unique identifier of the plan in the Billsby platform (required)
     * @return UpdatePlanAndCycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlanAndCycleRequestBuilder updatePlanAndCycle(String companyDomain, Integer productId, Integer planId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
        if (planId == null) throw new IllegalArgumentException("\"planId\" is required but got null");
        return new UpdatePlanAndCycleRequestBuilder(companyDomain, productId, planId);
    }
    private okhttp3.Call updatePlanOrderCall(String companyDomain, String productId, ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productUpdatePlanOrderRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products/{productId}/plans/orders"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlanOrderValidateBeforeCall(String companyDomain, String productId, ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updatePlanOrder(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updatePlanOrder(Async)");
        }

        return updatePlanOrderCall(companyDomain, productId, productUpdatePlanOrderRequest, _callback);

    }


    private ApiResponse<String> updatePlanOrderWithHttpInfo(String companyDomain, String productId, ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePlanOrderValidateBeforeCall(companyDomain, productId, productUpdatePlanOrderRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlanOrderAsync(String companyDomain, String productId, ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlanOrderValidateBeforeCall(companyDomain, productId, productUpdatePlanOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlanOrderRequestBuilder {
        private final String companyDomain;
        private final String productId;
        private List<Integer> orderedPlanIds;

        private UpdatePlanOrderRequestBuilder(String companyDomain, String productId) {
            this.companyDomain = companyDomain;
            this.productId = productId;
        }

        /**
         * Set orderedPlanIds
         * @param orderedPlanIds A list of Plan IDs in the desired order to show (optional)
         * @return UpdatePlanOrderRequestBuilder
         */
        public UpdatePlanOrderRequestBuilder orderedPlanIds(List<Integer> orderedPlanIds) {
            this.orderedPlanIds = orderedPlanIds;
            return this;
        }
        
        /**
         * Build call for updatePlanOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest = buildBodyParams();
            return updatePlanOrderCall(companyDomain, productId, productUpdatePlanOrderRequest, _callback);
        }

        private ProductUpdatePlanOrderRequest buildBodyParams() {
            ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest = new ProductUpdatePlanOrderRequest();
            productUpdatePlanOrderRequest.orderedPlanIds(this.orderedPlanIds);
            return productUpdatePlanOrderRequest;
        }

        /**
         * Execute updatePlanOrder request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest = buildBodyParams();
            ApiResponse<String> localVarResp = updatePlanOrderWithHttpInfo(companyDomain, productId, productUpdatePlanOrderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlanOrder request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest = buildBodyParams();
            return updatePlanOrderWithHttpInfo(companyDomain, productId, productUpdatePlanOrderRequest);
        }

        /**
         * Execute updatePlanOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            ProductUpdatePlanOrderRequest productUpdatePlanOrderRequest = buildBodyParams();
            return updatePlanOrderAsync(companyDomain, productId, productUpdatePlanOrderRequest, _callback);
        }
    }

    /**
     * Update plan order
     * Change the order in which your plans displayed
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param productId The unique identifier of the product in the Billsby platform (required)
     * @return UpdatePlanOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlanOrderRequestBuilder updatePlanOrder(String companyDomain, String productId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (productId == null) throw new IllegalArgumentException("\"productId\" is required but got null");
            

        return new UpdatePlanOrderRequestBuilder(companyDomain, productId);
    }
    private okhttp3.Call updateProductCall(String companyDomain, Integer productID, ProductUpdateProductRequest productUpdateProductRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productUpdateProductRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/products/{productId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "productID" + "}", localVarApiClient.escapeString(productID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(String companyDomain, Integer productID, ProductUpdateProductRequest productUpdateProductRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateProduct(Async)");
        }

        // verify the required parameter 'productID' is set
        if (productID == null) {
            throw new ApiException("Missing the required parameter 'productID' when calling updateProduct(Async)");
        }

        return updateProductCall(companyDomain, productID, productUpdateProductRequest, _callback);

    }


    private ApiResponse<ProductUpdateProductResponse> updateProductWithHttpInfo(String companyDomain, Integer productID, ProductUpdateProductRequest productUpdateProductRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(companyDomain, productID, productUpdateProductRequest, null);
        Type localVarReturnType = new TypeToken<ProductUpdateProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProductAsync(String companyDomain, Integer productID, ProductUpdateProductRequest productUpdateProductRequest, final ApiCallback<ProductUpdateProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(companyDomain, productID, productUpdateProductRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductUpdateProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProductRequestBuilder {
        private final String companyDomain;
        private final Integer productID;
        private String name;
        private Integer visibility;
        private String billingCurrency;
        private String displayName;
        private String decription;
        private Boolean isShippingAddressRequired;
        private Boolean isShippingAddressValidationRequired;
        private Boolean isBillingAddressValidationRequired;
        private Boolean isAdditionalEmailRequired;
        private Boolean isPhoneNumberRequired;
        private Boolean isMarketingConsentRequired;
        private String alertEmail;
        private ProductUpdateProductRequestOrderedCustomFields orderedCustomFields;
        private Integer typeOfProduct;
        private ProductUpdateProductRequestProductCountryLimitations productCountryLimitations;

        private UpdateProductRequestBuilder(String companyDomain, Integer productID) {
            this.companyDomain = companyDomain;
            this.productID = productID;
        }

        /**
         * Set name
         * @param name The name of the product you want to update (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility The type of visibility of each product; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public&#x3D;0, Hidden&#x3D;1, Internal&#x3D;2, OffSale&#x3D;3) (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder visibility(Integer visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set billingCurrency
         * @param billingCurrency The currency you want to the product to be billed in. This must be an ISO3 currency code with maximum three characters. For example: GBP, USD, etc (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder billingCurrency(String billingCurrency) {
            this.billingCurrency = billingCurrency;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName The display name of the product you want to create (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set decription
         * @param decription A short description of the product (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder decription(String decription) {
            this.decription = decription;
            return this;
        }
        
        /**
         * Set isShippingAddressRequired
         * @param isShippingAddressRequired Do you need to collect a shipping address from your customers for this product; true or false (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder isShippingAddressRequired(Boolean isShippingAddressRequired) {
            this.isShippingAddressRequired = isShippingAddressRequired;
            return this;
        }
        
        /**
         * Set isShippingAddressValidationRequired
         * @param isShippingAddressValidationRequired Do you want to validate the shipping address using our tool; true or false (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder isShippingAddressValidationRequired(Boolean isShippingAddressValidationRequired) {
            this.isShippingAddressValidationRequired = isShippingAddressValidationRequired;
            return this;
        }
        
        /**
         * Set isBillingAddressValidationRequired
         * @param isBillingAddressValidationRequired Do you want to validate the billing address using our tool; true or false (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder isBillingAddressValidationRequired(Boolean isBillingAddressValidationRequired) {
            this.isBillingAddressValidationRequired = isBillingAddressValidationRequired;
            return this;
        }
        
        /**
         * Set isAdditionalEmailRequired
         * @param isAdditionalEmailRequired Do you want to collect an additional email address from your customers at checkout; true or false (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder isAdditionalEmailRequired(Boolean isAdditionalEmailRequired) {
            this.isAdditionalEmailRequired = isAdditionalEmailRequired;
            return this;
        }
        
        /**
         * Set isPhoneNumberRequired
         * @param isPhoneNumberRequired Do you need to collect a phone number from your customers at checkout; true or flase (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder isPhoneNumberRequired(Boolean isPhoneNumberRequired) {
            this.isPhoneNumberRequired = isPhoneNumberRequired;
            return this;
        }
        
        /**
         * Set isMarketingConsentRequired
         * @param isMarketingConsentRequired Do you need to get marketing consent from your customers at checkout; true or false (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder isMarketingConsentRequired(Boolean isMarketingConsentRequired) {
            this.isMarketingConsentRequired = isMarketingConsentRequired;
            return this;
        }
        
        /**
         * Set alertEmail
         * @param alertEmail Set an email to be alerted when a customer signs up for this product (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder alertEmail(String alertEmail) {
            this.alertEmail = alertEmail;
            return this;
        }
        
        /**
         * Set orderedCustomFields
         * @param orderedCustomFields  (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder orderedCustomFields(ProductUpdateProductRequestOrderedCustomFields orderedCustomFields) {
            this.orderedCustomFields = orderedCustomFields;
            return this;
        }
        
        /**
         * Set typeOfProduct
         * @param typeOfProduct The type of product you want to create; 1 is tiered (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder typeOfProduct(Integer typeOfProduct) {
            this.typeOfProduct = typeOfProduct;
            return this;
        }
        
        /**
         * Set productCountryLimitations
         * @param productCountryLimitations  (optional)
         * @return UpdateProductRequestBuilder
         */
        public UpdateProductRequestBuilder productCountryLimitations(ProductUpdateProductRequestProductCountryLimitations productCountryLimitations) {
            this.productCountryLimitations = productCountryLimitations;
            return this;
        }
        
        /**
         * Build call for updateProduct
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProductUpdateProductRequest productUpdateProductRequest = buildBodyParams();
            return updateProductCall(companyDomain, productID, productUpdateProductRequest, _callback);
        }

        private ProductUpdateProductRequest buildBodyParams() {
            ProductUpdateProductRequest productUpdateProductRequest = new ProductUpdateProductRequest();
            productUpdateProductRequest.name(this.name);
            productUpdateProductRequest.visibility(this.visibility);
            productUpdateProductRequest.billingCurrency(this.billingCurrency);
            productUpdateProductRequest.displayName(this.displayName);
            productUpdateProductRequest.decription(this.decription);
            productUpdateProductRequest.isShippingAddressRequired(this.isShippingAddressRequired);
            productUpdateProductRequest.isShippingAddressValidationRequired(this.isShippingAddressValidationRequired);
            productUpdateProductRequest.isBillingAddressValidationRequired(this.isBillingAddressValidationRequired);
            productUpdateProductRequest.isAdditionalEmailRequired(this.isAdditionalEmailRequired);
            productUpdateProductRequest.isPhoneNumberRequired(this.isPhoneNumberRequired);
            productUpdateProductRequest.isMarketingConsentRequired(this.isMarketingConsentRequired);
            productUpdateProductRequest.alertEmail(this.alertEmail);
            productUpdateProductRequest.orderedCustomFields(this.orderedCustomFields);
            productUpdateProductRequest.typeOfProduct(this.typeOfProduct);
            productUpdateProductRequest.productCountryLimitations(this.productCountryLimitations);
            return productUpdateProductRequest;
        }

        /**
         * Execute updateProduct request
         * @return ProductUpdateProductResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ProductUpdateProductResponse execute() throws ApiException {
            ProductUpdateProductRequest productUpdateProductRequest = buildBodyParams();
            ApiResponse<ProductUpdateProductResponse> localVarResp = updateProductWithHttpInfo(companyDomain, productID, productUpdateProductRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProduct request with HTTP info returned
         * @return ApiResponse&lt;ProductUpdateProductResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProductUpdateProductResponse> executeWithHttpInfo() throws ApiException {
            ProductUpdateProductRequest productUpdateProductRequest = buildBodyParams();
            return updateProductWithHttpInfo(companyDomain, productID, productUpdateProductRequest);
        }

        /**
         * Execute updateProduct request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProductUpdateProductResponse> _callback) throws ApiException {
            ProductUpdateProductRequest productUpdateProductRequest = buildBodyParams();
            return updateProductAsync(companyDomain, productID, productUpdateProductRequest, _callback);
        }
    }

    /**
     * Update a product
     * Update product for your company
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param productID The unique identifier of the product in the Billsby platform (required)
     * @return UpdateProductRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProductRequestBuilder updateProduct(String companyDomain, Integer productID) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (productID == null) throw new IllegalArgumentException("\"productID\" is required but got null");
        return new UpdateProductRequestBuilder(companyDomain, productID);
    }
}

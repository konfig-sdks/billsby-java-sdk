/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequest;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestAddress;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner;
import com.konfigthis.client.model.CustomerAddSubscriptionToExistingCustomerResponse;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequest;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequestAddress;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequestCardDetails;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionRequestShippingAddress;
import com.konfigthis.client.model.CustomerCreateNewCustomerAndSubscriptionResponse;
import com.konfigthis.client.model.CustomerCreateWithoutSubscriptionRequest;
import com.konfigthis.client.model.CustomerCreateWithoutSubscriptionRequestCardDetails;
import com.konfigthis.client.model.CustomerCreateWithoutSubscriptionResponse;
import com.konfigthis.client.model.CustomerGetCreditNotesResponseInner;
import com.konfigthis.client.model.CustomerGetDetailsResponse;
import com.konfigthis.client.model.CustomerGetSubscriptionsByUniqueIdResponseInner;
import com.konfigthis.client.model.CustomerUpdateCustomFieldResponseRequest;
import com.konfigthis.client.model.CustomerUpdateCustomFieldResponseResponseInner;
import com.konfigthis.client.model.CustomerUpdateDetailsRequest;
import com.konfigthis.client.model.CustomerUpdateDetailsRequestBillingAddress;
import com.konfigthis.client.model.CustomerUpdateDetailsResponse;
import com.konfigthis.client.model.CustomerUpdatePaymentCardTokenRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getSec0() == null) {
            throw new IllegalArgumentException("\"ApiKey\" is required but no API key was provided. Please set \"ApiKey\" with ApiClient#setSec0(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addSubscriptionToExistingCustomerCall(String companyDomain, String customerUniqueId, CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAddSubscriptionToExistingCustomerRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/subscriptions"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSubscriptionToExistingCustomerValidateBeforeCall(String companyDomain, String customerUniqueId, CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling addSubscriptionToExistingCustomer(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling addSubscriptionToExistingCustomer(Async)");
        }

        return addSubscriptionToExistingCustomerCall(companyDomain, customerUniqueId, customerAddSubscriptionToExistingCustomerRequest, _callback);

    }


    private ApiResponse<CustomerAddSubscriptionToExistingCustomerResponse> addSubscriptionToExistingCustomerWithHttpInfo(String companyDomain, String customerUniqueId, CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = addSubscriptionToExistingCustomerValidateBeforeCall(companyDomain, customerUniqueId, customerAddSubscriptionToExistingCustomerRequest, null);
        Type localVarReturnType = new TypeToken<CustomerAddSubscriptionToExistingCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addSubscriptionToExistingCustomerAsync(String companyDomain, String customerUniqueId, CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest, final ApiCallback<CustomerAddSubscriptionToExistingCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSubscriptionToExistingCustomerValidateBeforeCall(companyDomain, customerUniqueId, customerAddSubscriptionToExistingCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerAddSubscriptionToExistingCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddSubscriptionToExistingCustomerRequestBuilder {
        private final Integer cycleId;
        private final String companyDomain;
        private final String customerUniqueId;
        private Integer units;
        private CustomerAddSubscriptionToExistingCustomerRequestAddress address;
        private Object shippingAddress;
        private String additionalEmail;
        private String phoneNumberDialCountry;
        private Integer phoneNumberDialCode;
        private Integer phoneNumber;
        private Boolean marketingConsent;
        private String taxRegNumber;
        private String ipAddress;
        private List<CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner> customFieldResponse;
        private List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns;
        private Integer allowances;
        private List<CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner> couponCodes;

        private AddSubscriptionToExistingCustomerRequestBuilder(Integer cycleId, String companyDomain, String customerUniqueId) {
            this.cycleId = cycleId;
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Set units
         * @param units The number of units for unit based plans (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder units(Integer units) {
            this.units = units;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder address(CustomerAddSubscriptionToExistingCustomerRequestAddress address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress The shipping address of the customer (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder shippingAddress(Object shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Set additionalEmail
         * @param additionalEmail Any additional email addresses given by the customer (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder additionalEmail(String additionalEmail) {
            this.additionalEmail = additionalEmail;
            return this;
        }
        
        /**
         * Set phoneNumberDialCountry
         * @param phoneNumberDialCountry The country associated with the phone number (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder phoneNumberDialCountry(String phoneNumberDialCountry) {
            this.phoneNumberDialCountry = phoneNumberDialCountry;
            return this;
        }
        
        /**
         * Set phoneNumberDialCode
         * @param phoneNumberDialCode The country dial code for the customer phone number (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder phoneNumberDialCode(Integer phoneNumberDialCode) {
            this.phoneNumberDialCode = phoneNumberDialCode;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber The customer&#39;s phone number (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder phoneNumber(Integer phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set marketingConsent
         * @param marketingConsent Gas the customer given marketing consent: true or false (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder marketingConsent(Boolean marketingConsent) {
            this.marketingConsent = marketingConsent;
            return this;
        }
        
        /**
         * Set taxRegNumber
         * @param taxRegNumber Tax registration number (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder taxRegNumber(String taxRegNumber) {
            this.taxRegNumber = taxRegNumber;
            return this;
        }
        
        /**
         * Set ipAddress
         * @param ipAddress  (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder ipAddress(String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        
        /**
         * Set customFieldResponse
         * @param customFieldResponse Any responses to custom fields (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder customFieldResponse(List<CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner> customFieldResponse) {
            this.customFieldResponse = customFieldResponse;
            return this;
        }
        
        /**
         * Set addOns
         * @param addOns Any add-ons to be included in the plan, along with the quantity of each add-on if unit based (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder addOns(List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns) {
            this.addOns = addOns;
            return this;
        }
        
        /**
         * Set allowances
         * @param allowances Any allowances to be included with the plan (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder allowances(Integer allowances) {
            this.allowances = allowances;
            return this;
        }
        
        /**
         * Set couponCodes
         * @param couponCodes The coupon code to be used for the plan (optional)
         * @return AddSubscriptionToExistingCustomerRequestBuilder
         */
        public AddSubscriptionToExistingCustomerRequestBuilder couponCodes(List<CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner> couponCodes) {
            this.couponCodes = couponCodes;
            return this;
        }
        
        /**
         * Build call for addSubscriptionToExistingCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest = buildBodyParams();
            return addSubscriptionToExistingCustomerCall(companyDomain, customerUniqueId, customerAddSubscriptionToExistingCustomerRequest, _callback);
        }

        private CustomerAddSubscriptionToExistingCustomerRequest buildBodyParams() {
            CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest = new CustomerAddSubscriptionToExistingCustomerRequest();
            customerAddSubscriptionToExistingCustomerRequest.cycleId(this.cycleId);
            customerAddSubscriptionToExistingCustomerRequest.units(this.units);
            customerAddSubscriptionToExistingCustomerRequest.address(this.address);
            customerAddSubscriptionToExistingCustomerRequest.shippingAddress(this.shippingAddress);
            customerAddSubscriptionToExistingCustomerRequest.additionalEmail(this.additionalEmail);
            customerAddSubscriptionToExistingCustomerRequest.phoneNumberDialCountry(this.phoneNumberDialCountry);
            customerAddSubscriptionToExistingCustomerRequest.phoneNumberDialCode(this.phoneNumberDialCode);
            customerAddSubscriptionToExistingCustomerRequest.phoneNumber(this.phoneNumber);
            customerAddSubscriptionToExistingCustomerRequest.marketingConsent(this.marketingConsent);
            customerAddSubscriptionToExistingCustomerRequest.taxRegNumber(this.taxRegNumber);
            customerAddSubscriptionToExistingCustomerRequest.ipAddress(this.ipAddress);
            customerAddSubscriptionToExistingCustomerRequest.customFieldResponse(this.customFieldResponse);
            customerAddSubscriptionToExistingCustomerRequest.addOns(this.addOns);
            customerAddSubscriptionToExistingCustomerRequest.allowances(this.allowances);
            customerAddSubscriptionToExistingCustomerRequest.couponCodes(this.couponCodes);
            return customerAddSubscriptionToExistingCustomerRequest;
        }

        /**
         * Execute addSubscriptionToExistingCustomer request
         * @return CustomerAddSubscriptionToExistingCustomerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomerAddSubscriptionToExistingCustomerResponse execute() throws ApiException {
            CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest = buildBodyParams();
            ApiResponse<CustomerAddSubscriptionToExistingCustomerResponse> localVarResp = addSubscriptionToExistingCustomerWithHttpInfo(companyDomain, customerUniqueId, customerAddSubscriptionToExistingCustomerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addSubscriptionToExistingCustomer request with HTTP info returned
         * @return ApiResponse&lt;CustomerAddSubscriptionToExistingCustomerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerAddSubscriptionToExistingCustomerResponse> executeWithHttpInfo() throws ApiException {
            CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest = buildBodyParams();
            return addSubscriptionToExistingCustomerWithHttpInfo(companyDomain, customerUniqueId, customerAddSubscriptionToExistingCustomerRequest);
        }

        /**
         * Execute addSubscriptionToExistingCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerAddSubscriptionToExistingCustomerResponse> _callback) throws ApiException {
            CustomerAddSubscriptionToExistingCustomerRequest customerAddSubscriptionToExistingCustomerRequest = buildBodyParams();
            return addSubscriptionToExistingCustomerAsync(companyDomain, customerUniqueId, customerAddSubscriptionToExistingCustomerRequest, _callback);
        }
    }

    /**
     * Add subscription to existing customer
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return AddSubscriptionToExistingCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddSubscriptionToExistingCustomerRequestBuilder addSubscriptionToExistingCustomer(Integer cycleId, String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (cycleId == null) throw new IllegalArgumentException("\"cycleId\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new AddSubscriptionToExistingCustomerRequestBuilder(cycleId, companyDomain, customerUniqueId);
    }
    private okhttp3.Call clearGdprDataCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/gdprcleanup"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearGdprDataValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling clearGdprData(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling clearGdprData(Async)");
        }

        return clearGdprDataCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<String> clearGdprDataWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = clearGdprDataValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call clearGdprDataAsync(String companyDomain, String customerUniqueId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearGdprDataValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ClearGdprDataRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private ClearGdprDataRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for clearGdprData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return clearGdprDataCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute clearGdprData request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = clearGdprDataWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute clearGdprData request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return clearGdprDataWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute clearGdprData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return clearGdprDataAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Clear customer data (GDPR)
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return ClearGdprDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ClearGdprDataRequestBuilder clearGdprData(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new ClearGdprDataRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call createNewCustomerAndSubscriptionCall(String companyDomain, CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerCreateNewCustomerAndSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/subscriptions"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCustomerAndSubscriptionValidateBeforeCall(String companyDomain, CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createNewCustomerAndSubscription(Async)");
        }

        return createNewCustomerAndSubscriptionCall(companyDomain, customerCreateNewCustomerAndSubscriptionRequest, _callback);

    }


    private ApiResponse<CustomerCreateNewCustomerAndSubscriptionResponse> createNewCustomerAndSubscriptionWithHttpInfo(String companyDomain, CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewCustomerAndSubscriptionValidateBeforeCall(companyDomain, customerCreateNewCustomerAndSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<CustomerCreateNewCustomerAndSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCustomerAndSubscriptionAsync(String companyDomain, CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest, final ApiCallback<CustomerCreateNewCustomerAndSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCustomerAndSubscriptionValidateBeforeCall(companyDomain, customerCreateNewCustomerAndSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerCreateNewCustomerAndSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCustomerAndSubscriptionRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String email;
        private final Integer cycleId;
        private final Integer units;
        private final CustomerCreateNewCustomerAndSubscriptionRequestAddress address;
        private final CustomerCreateNewCustomerAndSubscriptionRequestCardDetails cardDetails;
        private final String companyDomain;
        private CustomerCreateNewCustomerAndSubscriptionRequestShippingAddress shippingAddress;
        private String additionalEmail;
        private String phoneNumberDialCountry;
        private Integer phoneNumberDialCode;
        private Integer phoneNumber;
        private Boolean marketingConsent;
        private List<CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner> customFieldResponse;
        private List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns;
        private List<Integer> allowances;
        private List<CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner> couponCodes;

        private CreateNewCustomerAndSubscriptionRequestBuilder(String firstName, String lastName, String email, Integer cycleId, Integer units, CustomerCreateNewCustomerAndSubscriptionRequestAddress address, CustomerCreateNewCustomerAndSubscriptionRequestCardDetails cardDetails, String companyDomain) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.cycleId = cycleId;
            this.units = units;
            this.address = address;
            this.cardDetails = cardDetails;
            this.companyDomain = companyDomain;
        }

        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder shippingAddress(CustomerCreateNewCustomerAndSubscriptionRequestShippingAddress shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Set additionalEmail
         * @param additionalEmail Any additional email address provided by the customer (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder additionalEmail(String additionalEmail) {
            this.additionalEmail = additionalEmail;
            return this;
        }
        
        /**
         * Set phoneNumberDialCountry
         * @param phoneNumberDialCountry The country associated with their phone number (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder phoneNumberDialCountry(String phoneNumberDialCountry) {
            this.phoneNumberDialCountry = phoneNumberDialCountry;
            return this;
        }
        
        /**
         * Set phoneNumberDialCode
         * @param phoneNumberDialCode The country code associated with their phone number (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder phoneNumberDialCode(Integer phoneNumberDialCode) {
            this.phoneNumberDialCode = phoneNumberDialCode;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber The customer&#39;s phone number. If phoneNumber is provided, then phoneNumberDialCountry and phoneNumberDialCode are required. (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder phoneNumber(Integer phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set marketingConsent
         * @param marketingConsent Has the customer given marketing consent; true or false (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder marketingConsent(Boolean marketingConsent) {
            this.marketingConsent = marketingConsent;
            return this;
        }
        
        /**
         * Set customFieldResponse
         * @param customFieldResponse Response to any custom field questions you want to add to the subscription (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder customFieldResponse(List<CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner> customFieldResponse) {
            this.customFieldResponse = customFieldResponse;
            return this;
        }
        
        /**
         * Set addOns
         * @param addOns The add-ons that you want to include in the subscription (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder addOns(List<CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner> addOns) {
            this.addOns = addOns;
            return this;
        }
        
        /**
         * Set allowances
         * @param allowances The IDs of any allowances you want to include in the subscription. For multiple allowances you can add the IDs separated by a comma (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder allowances(List<Integer> allowances) {
            this.allowances = allowances;
            return this;
        }
        
        /**
         * Set couponCodes
         * @param couponCodes The codes of any coupons you want to apply to the subscription (optional)
         * @return CreateNewCustomerAndSubscriptionRequestBuilder
         */
        public CreateNewCustomerAndSubscriptionRequestBuilder couponCodes(List<CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner> couponCodes) {
            this.couponCodes = couponCodes;
            return this;
        }
        
        /**
         * Build call for createNewCustomerAndSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest = buildBodyParams();
            return createNewCustomerAndSubscriptionCall(companyDomain, customerCreateNewCustomerAndSubscriptionRequest, _callback);
        }

        private CustomerCreateNewCustomerAndSubscriptionRequest buildBodyParams() {
            CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest = new CustomerCreateNewCustomerAndSubscriptionRequest();
            customerCreateNewCustomerAndSubscriptionRequest.firstName(this.firstName);
            customerCreateNewCustomerAndSubscriptionRequest.lastName(this.lastName);
            customerCreateNewCustomerAndSubscriptionRequest.email(this.email);
            customerCreateNewCustomerAndSubscriptionRequest.cycleId(this.cycleId);
            customerCreateNewCustomerAndSubscriptionRequest.units(this.units);
            customerCreateNewCustomerAndSubscriptionRequest.address(this.address);
            customerCreateNewCustomerAndSubscriptionRequest.shippingAddress(this.shippingAddress);
            customerCreateNewCustomerAndSubscriptionRequest.additionalEmail(this.additionalEmail);
            customerCreateNewCustomerAndSubscriptionRequest.phoneNumberDialCountry(this.phoneNumberDialCountry);
            customerCreateNewCustomerAndSubscriptionRequest.phoneNumberDialCode(this.phoneNumberDialCode);
            customerCreateNewCustomerAndSubscriptionRequest.phoneNumber(this.phoneNumber);
            customerCreateNewCustomerAndSubscriptionRequest.marketingConsent(this.marketingConsent);
            customerCreateNewCustomerAndSubscriptionRequest.customFieldResponse(this.customFieldResponse);
            customerCreateNewCustomerAndSubscriptionRequest.addOns(this.addOns);
            customerCreateNewCustomerAndSubscriptionRequest.allowances(this.allowances);
            customerCreateNewCustomerAndSubscriptionRequest.couponCodes(this.couponCodes);
            customerCreateNewCustomerAndSubscriptionRequest.cardDetails(this.cardDetails);
            return customerCreateNewCustomerAndSubscriptionRequest;
        }

        /**
         * Execute createNewCustomerAndSubscription request
         * @return CustomerCreateNewCustomerAndSubscriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomerCreateNewCustomerAndSubscriptionResponse execute() throws ApiException {
            CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest = buildBodyParams();
            ApiResponse<CustomerCreateNewCustomerAndSubscriptionResponse> localVarResp = createNewCustomerAndSubscriptionWithHttpInfo(companyDomain, customerCreateNewCustomerAndSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCustomerAndSubscription request with HTTP info returned
         * @return ApiResponse&lt;CustomerCreateNewCustomerAndSubscriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerCreateNewCustomerAndSubscriptionResponse> executeWithHttpInfo() throws ApiException {
            CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest = buildBodyParams();
            return createNewCustomerAndSubscriptionWithHttpInfo(companyDomain, customerCreateNewCustomerAndSubscriptionRequest);
        }

        /**
         * Execute createNewCustomerAndSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerCreateNewCustomerAndSubscriptionResponse> _callback) throws ApiException {
            CustomerCreateNewCustomerAndSubscriptionRequest customerCreateNewCustomerAndSubscriptionRequest = buildBodyParams();
            return createNewCustomerAndSubscriptionAsync(companyDomain, customerCreateNewCustomerAndSubscriptionRequest, _callback);
        }
    }

    /**
     * Create new customer and subscription
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return CreateNewCustomerAndSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCustomerAndSubscriptionRequestBuilder createNewCustomerAndSubscription(String firstName, String lastName, String email, Integer cycleId, Integer units, CustomerCreateNewCustomerAndSubscriptionRequestAddress address, CustomerCreateNewCustomerAndSubscriptionRequestCardDetails cardDetails, String companyDomain) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (cycleId == null) throw new IllegalArgumentException("\"cycleId\" is required but got null");
        if (units == null) throw new IllegalArgumentException("\"units\" is required but got null");
        if (address == null) throw new IllegalArgumentException("\"address\" is required but got null");
        if (cardDetails == null) throw new IllegalArgumentException("\"cardDetails\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new CreateNewCustomerAndSubscriptionRequestBuilder(firstName, lastName, email, cycleId, units, address, cardDetails, companyDomain);
    }
    private okhttp3.Call createWithoutSubscriptionCall(String companyDomain, CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerCreateWithoutSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWithoutSubscriptionValidateBeforeCall(String companyDomain, CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling createWithoutSubscription(Async)");
        }

        return createWithoutSubscriptionCall(companyDomain, customerCreateWithoutSubscriptionRequest, _callback);

    }


    private ApiResponse<CustomerCreateWithoutSubscriptionResponse> createWithoutSubscriptionWithHttpInfo(String companyDomain, CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = createWithoutSubscriptionValidateBeforeCall(companyDomain, customerCreateWithoutSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<CustomerCreateWithoutSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWithoutSubscriptionAsync(String companyDomain, CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest, final ApiCallback<CustomerCreateWithoutSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWithoutSubscriptionValidateBeforeCall(companyDomain, customerCreateWithoutSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerCreateWithoutSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWithoutSubscriptionRequestBuilder {
        private final String addressLine1;
        private final String city;
        private final String state;
        private final String country;
        private final String postCode;
        private final String firstName;
        private final String lastName;
        private final String email;
        private final String companyDomain;
        private String addressLine2;
        private CustomerCreateWithoutSubscriptionRequestCardDetails cardDetails;

        private CreateWithoutSubscriptionRequestBuilder(String addressLine1, String city, String state, String country, String postCode, String firstName, String lastName, String email, String companyDomain) {
            this.addressLine1 = addressLine1;
            this.city = city;
            this.state = state;
            this.country = country;
            this.postCode = postCode;
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.companyDomain = companyDomain;
        }

        /**
         * Set addressLine2
         * @param addressLine2  (optional)
         * @return CreateWithoutSubscriptionRequestBuilder
         */
        public CreateWithoutSubscriptionRequestBuilder addressLine2(String addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }
        
        /**
         * Set cardDetails
         * @param cardDetails  (optional)
         * @return CreateWithoutSubscriptionRequestBuilder
         */
        public CreateWithoutSubscriptionRequestBuilder cardDetails(CustomerCreateWithoutSubscriptionRequestCardDetails cardDetails) {
            this.cardDetails = cardDetails;
            return this;
        }
        
        /**
         * Build call for createWithoutSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest = buildBodyParams();
            return createWithoutSubscriptionCall(companyDomain, customerCreateWithoutSubscriptionRequest, _callback);
        }

        private CustomerCreateWithoutSubscriptionRequest buildBodyParams() {
            CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest = new CustomerCreateWithoutSubscriptionRequest();
            customerCreateWithoutSubscriptionRequest.addressLine1(this.addressLine1);
            customerCreateWithoutSubscriptionRequest.addressLine2(this.addressLine2);
            customerCreateWithoutSubscriptionRequest.city(this.city);
            customerCreateWithoutSubscriptionRequest.state(this.state);
            customerCreateWithoutSubscriptionRequest.country(this.country);
            customerCreateWithoutSubscriptionRequest.postCode(this.postCode);
            customerCreateWithoutSubscriptionRequest.firstName(this.firstName);
            customerCreateWithoutSubscriptionRequest.lastName(this.lastName);
            customerCreateWithoutSubscriptionRequest.email(this.email);
            customerCreateWithoutSubscriptionRequest.cardDetails(this.cardDetails);
            return customerCreateWithoutSubscriptionRequest;
        }

        /**
         * Execute createWithoutSubscription request
         * @return CustomerCreateWithoutSubscriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomerCreateWithoutSubscriptionResponse execute() throws ApiException {
            CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest = buildBodyParams();
            ApiResponse<CustomerCreateWithoutSubscriptionResponse> localVarResp = createWithoutSubscriptionWithHttpInfo(companyDomain, customerCreateWithoutSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWithoutSubscription request with HTTP info returned
         * @return ApiResponse&lt;CustomerCreateWithoutSubscriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerCreateWithoutSubscriptionResponse> executeWithHttpInfo() throws ApiException {
            CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest = buildBodyParams();
            return createWithoutSubscriptionWithHttpInfo(companyDomain, customerCreateWithoutSubscriptionRequest);
        }

        /**
         * Execute createWithoutSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerCreateWithoutSubscriptionResponse> _callback) throws ApiException {
            CustomerCreateWithoutSubscriptionRequest customerCreateWithoutSubscriptionRequest = buildBodyParams();
            return createWithoutSubscriptionAsync(companyDomain, customerCreateWithoutSubscriptionRequest, _callback);
        }
    }

    /**
     * Create without subscription
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @return CreateWithoutSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateWithoutSubscriptionRequestBuilder createWithoutSubscription(String addressLine1, String city, String state, String country, String postCode, String firstName, String lastName, String email, String companyDomain) throws IllegalArgumentException {
        if (addressLine1 == null) throw new IllegalArgumentException("\"addressLine1\" is required but got null");
            

        if (city == null) throw new IllegalArgumentException("\"city\" is required but got null");
            

        if (state == null) throw new IllegalArgumentException("\"state\" is required but got null");
            

        if (country == null) throw new IllegalArgumentException("\"country\" is required but got null");
            

        if (postCode == null) throw new IllegalArgumentException("\"postCode\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        return new CreateWithoutSubscriptionRequestBuilder(addressLine1, city, state, country, postCode, firstName, lastName, email, companyDomain);
    }
    private okhttp3.Call deleteByIdCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling deleteById(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling deleteById(Async)");
        }

        return deleteByIdCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<String> deleteByIdWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(String companyDomain, String customerUniqueId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private DeleteByIdRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute deleteById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = deleteByIdWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return deleteByIdAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Delete a customer
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call getCreditNotesCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/creditNotes"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditNotesValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getCreditNotes(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling getCreditNotes(Async)");
        }

        return getCreditNotesCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<List<CustomerGetCreditNotesResponseInner>> getCreditNotesWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getCreditNotesValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<List<CustomerGetCreditNotesResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCreditNotesAsync(String companyDomain, String customerUniqueId, final ApiCallback<List<CustomerGetCreditNotesResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditNotesValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerGetCreditNotesResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCreditNotesRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private GetCreditNotesRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for getCreditNotes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCreditNotesCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute getCreditNotes request
         * @return List&lt;CustomerGetCreditNotesResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<CustomerGetCreditNotesResponseInner> execute() throws ApiException {
            ApiResponse<List<CustomerGetCreditNotesResponseInner>> localVarResp = getCreditNotesWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCreditNotes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CustomerGetCreditNotesResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CustomerGetCreditNotesResponseInner>> executeWithHttpInfo() throws ApiException {
            return getCreditNotesWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute getCreditNotes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CustomerGetCreditNotesResponseInner>> _callback) throws ApiException {
            return getCreditNotesAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Customer credit notes
     * This query gets individual customer&#39;s credit notes
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return GetCreditNotesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCreditNotesRequestBuilder getCreditNotes(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new GetCreditNotesRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call getDetailsCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getDetails(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling getDetails(Async)");
        }

        return getDetailsCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<CustomerGetDetailsResponse> getDetailsWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<CustomerGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String companyDomain, String customerUniqueId, final ApiCallback<CustomerGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<CustomerGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private GetDetailsRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute getDetails request
         * @return CustomerGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomerGetDetailsResponse execute() throws ApiException {
            ApiResponse<CustomerGetDetailsResponse> localVarResp = getDetailsWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;CustomerGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Customer details
     * This query gets individual customer details using the unique identifier provided in the Billsby platform
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new GetDetailsRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call getFeatureTagsCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/subscriptions/featuretags"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeatureTagsValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getFeatureTags(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling getFeatureTags(Async)");
        }

        return getFeatureTagsCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<List<String>> getFeatureTagsWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getFeatureTagsValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFeatureTagsAsync(String companyDomain, String customerUniqueId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeatureTagsValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFeatureTagsRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private GetFeatureTagsRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for getFeatureTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFeatureTagsCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute getFeatureTags request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = getFeatureTagsWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFeatureTags request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return getFeatureTagsWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute getFeatureTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return getFeatureTagsAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Customer feature tags
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return GetFeatureTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetFeatureTagsRequestBuilder getFeatureTags(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new GetFeatureTagsRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call getSubscriptionsByUniqueIdCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/subscriptions"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionsByUniqueIdValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling getSubscriptionsByUniqueId(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling getSubscriptionsByUniqueId(Async)");
        }

        return getSubscriptionsByUniqueIdCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<List<CustomerGetSubscriptionsByUniqueIdResponseInner>> getSubscriptionsByUniqueIdWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionsByUniqueIdValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<List<CustomerGetSubscriptionsByUniqueIdResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubscriptionsByUniqueIdAsync(String companyDomain, String customerUniqueId, final ApiCallback<List<CustomerGetSubscriptionsByUniqueIdResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionsByUniqueIdValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerGetSubscriptionsByUniqueIdResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubscriptionsByUniqueIdRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private GetSubscriptionsByUniqueIdRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for getSubscriptionsByUniqueId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubscriptionsByUniqueIdCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute getSubscriptionsByUniqueId request
         * @return List&lt;CustomerGetSubscriptionsByUniqueIdResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<CustomerGetSubscriptionsByUniqueIdResponseInner> execute() throws ApiException {
            ApiResponse<List<CustomerGetSubscriptionsByUniqueIdResponseInner>> localVarResp = getSubscriptionsByUniqueIdWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubscriptionsByUniqueId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CustomerGetSubscriptionsByUniqueIdResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CustomerGetSubscriptionsByUniqueIdResponseInner>> executeWithHttpInfo() throws ApiException {
            return getSubscriptionsByUniqueIdWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute getSubscriptionsByUniqueId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CustomerGetSubscriptionsByUniqueIdResponseInner>> _callback) throws ApiException {
            return getSubscriptionsByUniqueIdAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Customer subscriptions
     * This query gets individual customer&#39;s subscriptions using the unique identifier provided in the Billsby platform
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return GetSubscriptionsByUniqueIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetSubscriptionsByUniqueIdRequestBuilder getSubscriptionsByUniqueId(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new GetSubscriptionsByUniqueIdRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call listCustomersCall(String companyDomain, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomersValidateBeforeCall(String companyDomain, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling listCustomers(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listCustomers(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling listCustomers(Async)");
        }

        return listCustomersCall(companyDomain, page, pageSize, search, _callback);

    }


    private ApiResponse<String> listCustomersWithHttpInfo(String companyDomain, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = listCustomersValidateBeforeCall(companyDomain, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCustomersAsync(String companyDomain, Integer page, Integer pageSize, String search, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomersValidateBeforeCall(companyDomain, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCustomersRequestBuilder {
        private final String companyDomain;
        private final Integer page;
        private final Integer pageSize;
        private String search;

        private ListCustomersRequestBuilder(String companyDomain, Integer page, Integer pageSize) {
            this.companyDomain = companyDomain;
            this.page = page;
            this.pageSize = pageSize;
        }

        /**
         * Set search
         * @param search Filter customers by name (this can be a partial name) (optional)
         * @return ListCustomersRequestBuilder
         */
        public ListCustomersRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Build call for listCustomers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomersCall(companyDomain, page, pageSize, search, _callback);
        }


        /**
         * Execute listCustomers request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = listCustomersWithHttpInfo(companyDomain, page, pageSize, search);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCustomers request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return listCustomersWithHttpInfo(companyDomain, page, pageSize, search);
        }

        /**
         * Execute listCustomers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return listCustomersAsync(companyDomain, page, pageSize, search, _callback);
        }
    }

    /**
     * List customers
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param page The page of customers you would like to view (required)
     * @param pageSize The number of records to return per page (max 100) (required)
     * @return ListCustomersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomersRequestBuilder listCustomers(String companyDomain, Integer page, Integer pageSize) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new ListCustomersRequestBuilder(companyDomain, page, pageSize);
    }
    private okhttp3.Call updateCustomFieldResponseCall(String companyDomain, Integer customFieldResponseId, CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerUpdateCustomFieldResponseRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customfieldResponses/{customFieldResponseId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customFieldResponseId" + "}", localVarApiClient.escapeString(customFieldResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldResponseValidateBeforeCall(String companyDomain, Integer customFieldResponseId, CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateCustomFieldResponse(Async)");
        }

        // verify the required parameter 'customFieldResponseId' is set
        if (customFieldResponseId == null) {
            throw new ApiException("Missing the required parameter 'customFieldResponseId' when calling updateCustomFieldResponse(Async)");
        }

        return updateCustomFieldResponseCall(companyDomain, customFieldResponseId, customerUpdateCustomFieldResponseRequest, _callback);

    }


    private ApiResponse<List<CustomerUpdateCustomFieldResponseResponseInner>> updateCustomFieldResponseWithHttpInfo(String companyDomain, Integer customFieldResponseId, CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldResponseValidateBeforeCall(companyDomain, customFieldResponseId, customerUpdateCustomFieldResponseRequest, null);
        Type localVarReturnType = new TypeToken<List<CustomerUpdateCustomFieldResponseResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomFieldResponseAsync(String companyDomain, Integer customFieldResponseId, CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest, final ApiCallback<List<CustomerUpdateCustomFieldResponseResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldResponseValidateBeforeCall(companyDomain, customFieldResponseId, customerUpdateCustomFieldResponseRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CustomerUpdateCustomFieldResponseResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomFieldResponseRequestBuilder {
        private final String value;
        private final String companyDomain;
        private final Integer customFieldResponseId;

        private UpdateCustomFieldResponseRequestBuilder(String value, String companyDomain, Integer customFieldResponseId) {
            this.value = value;
            this.companyDomain = companyDomain;
            this.customFieldResponseId = customFieldResponseId;
        }

        /**
         * Build call for updateCustomFieldResponse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest = buildBodyParams();
            return updateCustomFieldResponseCall(companyDomain, customFieldResponseId, customerUpdateCustomFieldResponseRequest, _callback);
        }

        private CustomerUpdateCustomFieldResponseRequest buildBodyParams() {
            CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest = new CustomerUpdateCustomFieldResponseRequest();
            customerUpdateCustomFieldResponseRequest.value(this.value);
            return customerUpdateCustomFieldResponseRequest;
        }

        /**
         * Execute updateCustomFieldResponse request
         * @return List&lt;CustomerUpdateCustomFieldResponseResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<CustomerUpdateCustomFieldResponseResponseInner> execute() throws ApiException {
            CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest = buildBodyParams();
            ApiResponse<List<CustomerUpdateCustomFieldResponseResponseInner>> localVarResp = updateCustomFieldResponseWithHttpInfo(companyDomain, customFieldResponseId, customerUpdateCustomFieldResponseRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomFieldResponse request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CustomerUpdateCustomFieldResponseResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CustomerUpdateCustomFieldResponseResponseInner>> executeWithHttpInfo() throws ApiException {
            CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest = buildBodyParams();
            return updateCustomFieldResponseWithHttpInfo(companyDomain, customFieldResponseId, customerUpdateCustomFieldResponseRequest);
        }

        /**
         * Execute updateCustomFieldResponse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CustomerUpdateCustomFieldResponseResponseInner>> _callback) throws ApiException {
            CustomerUpdateCustomFieldResponseRequest customerUpdateCustomFieldResponseRequest = buildBodyParams();
            return updateCustomFieldResponseAsync(companyDomain, customFieldResponseId, customerUpdateCustomFieldResponseRequest, _callback);
        }
    }

    /**
     * Update customer response to custom fields
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customFieldResponseId The unique identifier for an individual customers response to a question (required)
     * @return UpdateCustomFieldResponseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomFieldResponseRequestBuilder updateCustomFieldResponse(String value, String companyDomain, Integer customFieldResponseId) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customFieldResponseId == null) throw new IllegalArgumentException("\"customFieldResponseId\" is required but got null");
        return new UpdateCustomFieldResponseRequestBuilder(value, companyDomain, customFieldResponseId);
    }
    private okhttp3.Call updateDetailsCall(String companyDomain, String customerUniqueId, CustomerUpdateDetailsRequest customerUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerUpdateDetailsRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String companyDomain, String customerUniqueId, CustomerUpdateDetailsRequest customerUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updateDetails(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(companyDomain, customerUniqueId, customerUpdateDetailsRequest, _callback);

    }


    private ApiResponse<CustomerUpdateDetailsResponse> updateDetailsWithHttpInfo(String companyDomain, String customerUniqueId, CustomerUpdateDetailsRequest customerUpdateDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(companyDomain, customerUniqueId, customerUpdateDetailsRequest, null);
        Type localVarReturnType = new TypeToken<CustomerUpdateDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAsync(String companyDomain, String customerUniqueId, CustomerUpdateDetailsRequest customerUpdateDetailsRequest, final ApiCallback<CustomerUpdateDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(companyDomain, customerUniqueId, customerUpdateDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerUpdateDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String email;
        private final CustomerUpdateDetailsRequestBillingAddress billingAddress;
        private final String companyDomain;
        private final String customerUniqueId;
        private String phoneNumberDialCountry;
        private String phoneNumberDialCode;
        private String phoneNumber;

        private UpdateDetailsRequestBuilder(String firstName, String lastName, String email, CustomerUpdateDetailsRequestBillingAddress billingAddress, String companyDomain, String customerUniqueId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.billingAddress = billingAddress;
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Set phoneNumberDialCountry
         * @param phoneNumberDialCountry The customers phone number dial country (i.e. \\\&quot;UK\\\&quot;) (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder phoneNumberDialCountry(String phoneNumberDialCountry) {
            this.phoneNumberDialCountry = phoneNumberDialCountry;
            return this;
        }
        
        /**
         * Set phoneNumberDialCode
         * @param phoneNumberDialCode The customer phone number dial code (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder phoneNumberDialCode(String phoneNumberDialCode) {
            this.phoneNumberDialCode = phoneNumberDialCode;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber The phone number we have on file for the customer. Remove \\\&quot;0\\\&quot; from the start. (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerUpdateDetailsRequest customerUpdateDetailsRequest = buildBodyParams();
            return updateDetailsCall(companyDomain, customerUniqueId, customerUpdateDetailsRequest, _callback);
        }

        private CustomerUpdateDetailsRequest buildBodyParams() {
            CustomerUpdateDetailsRequest customerUpdateDetailsRequest = new CustomerUpdateDetailsRequest();
            customerUpdateDetailsRequest.firstName(this.firstName);
            customerUpdateDetailsRequest.lastName(this.lastName);
            customerUpdateDetailsRequest.phoneNumberDialCountry(this.phoneNumberDialCountry);
            customerUpdateDetailsRequest.phoneNumberDialCode(this.phoneNumberDialCode);
            customerUpdateDetailsRequest.email(this.email);
            customerUpdateDetailsRequest.phoneNumber(this.phoneNumber);
            customerUpdateDetailsRequest.billingAddress(this.billingAddress);
            return customerUpdateDetailsRequest;
        }

        /**
         * Execute updateDetails request
         * @return CustomerUpdateDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomerUpdateDetailsResponse execute() throws ApiException {
            CustomerUpdateDetailsRequest customerUpdateDetailsRequest = buildBodyParams();
            ApiResponse<CustomerUpdateDetailsResponse> localVarResp = updateDetailsWithHttpInfo(companyDomain, customerUniqueId, customerUpdateDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;CustomerUpdateDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomerUpdateDetailsResponse> executeWithHttpInfo() throws ApiException {
            CustomerUpdateDetailsRequest customerUpdateDetailsRequest = buildBodyParams();
            return updateDetailsWithHttpInfo(companyDomain, customerUniqueId, customerUpdateDetailsRequest);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomerUpdateDetailsResponse> _callback) throws ApiException {
            CustomerUpdateDetailsRequest customerUpdateDetailsRequest = buildBodyParams();
            return updateDetailsAsync(companyDomain, customerUniqueId, customerUpdateDetailsRequest, _callback);
        }
    }

    /**
     * Update customer
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(String firstName, String lastName, String email, CustomerUpdateDetailsRequestBillingAddress billingAddress, String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (billingAddress == null) throw new IllegalArgumentException("\"billingAddress\" is required but got null");
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(firstName, lastName, email, billingAddress, companyDomain, customerUniqueId);
    }
    private okhttp3.Call updatePaymentCardTokenCall(String companyDomain, String customerUniqueId, CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerUpdatePaymentCardTokenRequest;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/paymentCard"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentCardTokenValidateBeforeCall(String companyDomain, String customerUniqueId, CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updatePaymentCardToken(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling updatePaymentCardToken(Async)");
        }

        return updatePaymentCardTokenCall(companyDomain, customerUniqueId, customerUpdatePaymentCardTokenRequest, _callback);

    }


    private ApiResponse<String> updatePaymentCardTokenWithHttpInfo(String companyDomain, String customerUniqueId, CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentCardTokenValidateBeforeCall(companyDomain, customerUniqueId, customerUpdatePaymentCardTokenRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePaymentCardTokenAsync(String companyDomain, String customerUniqueId, CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentCardTokenValidateBeforeCall(companyDomain, customerUniqueId, customerUpdatePaymentCardTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePaymentCardTokenRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;
        private String fullName;
        private String paymentCardtoken;
        private Integer expiryMonth;
        private Integer expiryYear;
        private String cardType;
        private String last4Digits;

        private UpdatePaymentCardTokenRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Set fullName
         * @param fullName The full name of the customer (optional)
         * @return UpdatePaymentCardTokenRequestBuilder
         */
        public UpdatePaymentCardTokenRequestBuilder fullName(String fullName) {
            this.fullName = fullName;
            return this;
        }
        
        /**
         * Set paymentCardtoken
         * @param paymentCardtoken The token for the payment card in the Billsby vault (optional)
         * @return UpdatePaymentCardTokenRequestBuilder
         */
        public UpdatePaymentCardTokenRequestBuilder paymentCardtoken(String paymentCardtoken) {
            this.paymentCardtoken = paymentCardtoken;
            return this;
        }
        
        /**
         * Set expiryMonth
         * @param expiryMonth The date that the payment card expires (optional)
         * @return UpdatePaymentCardTokenRequestBuilder
         */
        public UpdatePaymentCardTokenRequestBuilder expiryMonth(Integer expiryMonth) {
            this.expiryMonth = expiryMonth;
            return this;
        }
        
        /**
         * Set expiryYear
         * @param expiryYear The year that the payment card expires (optional)
         * @return UpdatePaymentCardTokenRequestBuilder
         */
        public UpdatePaymentCardTokenRequestBuilder expiryYear(Integer expiryYear) {
            this.expiryYear = expiryYear;
            return this;
        }
        
        /**
         * Set cardType
         * @param cardType The type of card (e.g. Visa, Mastercard, AMEX, etc.) (optional)
         * @return UpdatePaymentCardTokenRequestBuilder
         */
        public UpdatePaymentCardTokenRequestBuilder cardType(String cardType) {
            this.cardType = cardType;
            return this;
        }
        
        /**
         * Set last4Digits
         * @param last4Digits The last four digits of the long number on the payment card (optional)
         * @return UpdatePaymentCardTokenRequestBuilder
         */
        public UpdatePaymentCardTokenRequestBuilder last4Digits(String last4Digits) {
            this.last4Digits = last4Digits;
            return this;
        }
        
        /**
         * Build call for updatePaymentCardToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest = buildBodyParams();
            return updatePaymentCardTokenCall(companyDomain, customerUniqueId, customerUpdatePaymentCardTokenRequest, _callback);
        }

        private CustomerUpdatePaymentCardTokenRequest buildBodyParams() {
            CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest = new CustomerUpdatePaymentCardTokenRequest();
            customerUpdatePaymentCardTokenRequest.fullName(this.fullName);
            customerUpdatePaymentCardTokenRequest.paymentCardtoken(this.paymentCardtoken);
            customerUpdatePaymentCardTokenRequest.expiryMonth(this.expiryMonth);
            customerUpdatePaymentCardTokenRequest.expiryYear(this.expiryYear);
            customerUpdatePaymentCardTokenRequest.cardType(this.cardType);
            customerUpdatePaymentCardTokenRequest.last4Digits(this.last4Digits);
            return customerUpdatePaymentCardTokenRequest;
        }

        /**
         * Execute updatePaymentCardToken request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest = buildBodyParams();
            ApiResponse<String> localVarResp = updatePaymentCardTokenWithHttpInfo(companyDomain, customerUniqueId, customerUpdatePaymentCardTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePaymentCardToken request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest = buildBodyParams();
            return updatePaymentCardTokenWithHttpInfo(companyDomain, customerUniqueId, customerUpdatePaymentCardTokenRequest);
        }

        /**
         * Execute updatePaymentCardToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CustomerUpdatePaymentCardTokenRequest customerUpdatePaymentCardTokenRequest = buildBodyParams();
            return updatePaymentCardTokenAsync(companyDomain, customerUniqueId, customerUpdatePaymentCardTokenRequest, _callback);
        }
    }

    /**
     * Update payment card token
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return UpdatePaymentCardTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePaymentCardTokenRequestBuilder updatePaymentCardToken(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new UpdatePaymentCardTokenRequestBuilder(companyDomain, customerUniqueId);
    }
    private okhttp3.Call updatePaymentDetailsRequestCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyDomain}/customers/{customerUniqueId}/paymentdetailsrequest"
            .replace("{" + "companyDomain" + "}", localVarApiClient.escapeString(companyDomain.toString()))
            .replace("{" + "customerUniqueId" + "}", localVarApiClient.escapeString(customerUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentDetailsRequestValidateBeforeCall(String companyDomain, String customerUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyDomain' is set
        if (companyDomain == null) {
            throw new ApiException("Missing the required parameter 'companyDomain' when calling updatePaymentDetailsRequest(Async)");
        }

        // verify the required parameter 'customerUniqueId' is set
        if (customerUniqueId == null) {
            throw new ApiException("Missing the required parameter 'customerUniqueId' when calling updatePaymentDetailsRequest(Async)");
        }

        return updatePaymentDetailsRequestCall(companyDomain, customerUniqueId, _callback);

    }


    private ApiResponse<String> updatePaymentDetailsRequestWithHttpInfo(String companyDomain, String customerUniqueId) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentDetailsRequestValidateBeforeCall(companyDomain, customerUniqueId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePaymentDetailsRequestAsync(String companyDomain, String customerUniqueId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentDetailsRequestValidateBeforeCall(companyDomain, customerUniqueId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePaymentDetailsRequestRequestBuilder {
        private final String companyDomain;
        private final String customerUniqueId;

        private UpdatePaymentDetailsRequestRequestBuilder(String companyDomain, String customerUniqueId) {
            this.companyDomain = companyDomain;
            this.customerUniqueId = customerUniqueId;
        }

        /**
         * Build call for updatePaymentDetailsRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePaymentDetailsRequestCall(companyDomain, customerUniqueId, _callback);
        }


        /**
         * Execute updatePaymentDetailsRequest request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = updatePaymentDetailsRequestWithHttpInfo(companyDomain, customerUniqueId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePaymentDetailsRequest request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return updatePaymentDetailsRequestWithHttpInfo(companyDomain, customerUniqueId);
        }

        /**
         * Execute updatePaymentDetailsRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return updatePaymentDetailsRequestAsync(companyDomain, customerUniqueId, _callback);
        }
    }

    /**
     * Request to update payment details
     * 
     * @param companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets (required)
     * @param customerUniqueId The unique identifier of the customer in the Billsby platform (required)
     * @return UpdatePaymentDetailsRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePaymentDetailsRequestRequestBuilder updatePaymentDetailsRequest(String companyDomain, String customerUniqueId) throws IllegalArgumentException {
        if (companyDomain == null) throw new IllegalArgumentException("\"companyDomain\" is required but got null");
            

        if (customerUniqueId == null) throw new IllegalArgumentException("\"customerUniqueId\" is required but got null");
            

        return new UpdatePaymentDetailsRequestRequestBuilder(companyDomain, customerUniqueId);
    }
}

/*
 * Billsby API
 * Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..
 *
 * The version of the OpenAPI document: 1.3.5
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ProductCreateCycleRequestAddonPlanInputModelsInner;
import com.konfigthis.client.model.ProductCreateCycleRequestAllowancePlanInputModelInner;
import com.konfigthis.client.model.ProductCreateCycleRequestCyclesInputModelInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProductCreateCycleRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProductCreateCycleRequest {
  public static final String SERIALIZED_NAME_CYCLES_INPUT_MODEL = "cyclesInputModel";
  @SerializedName(SERIALIZED_NAME_CYCLES_INPUT_MODEL)
  private List<ProductCreateCycleRequestCyclesInputModelInner> cyclesInputModel = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDON_PLAN_INPUT_MODELS = "addonPlanInputModels";
  @SerializedName(SERIALIZED_NAME_ADDON_PLAN_INPUT_MODELS)
  private List<ProductCreateCycleRequestAddonPlanInputModelsInner> addonPlanInputModels = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWANCE_PLAN_INPUT_MODEL = "allowancePlanInputModel";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_PLAN_INPUT_MODEL)
  private List<ProductCreateCycleRequestAllowancePlanInputModelInner> allowancePlanInputModel = null;

  public ProductCreateCycleRequest() {
  }

  public ProductCreateCycleRequest cyclesInputModel(List<ProductCreateCycleRequestCyclesInputModelInner> cyclesInputModel) {
    
    
    
    
    this.cyclesInputModel = cyclesInputModel;
    return this;
  }

  public ProductCreateCycleRequest addCyclesInputModelItem(ProductCreateCycleRequestCyclesInputModelInner cyclesInputModelItem) {
    this.cyclesInputModel.add(cyclesInputModelItem);
    return this;
  }

   /**
   * Define cycle pricing model
   * @return cyclesInputModel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Define cycle pricing model")

  public List<ProductCreateCycleRequestCyclesInputModelInner> getCyclesInputModel() {
    return cyclesInputModel;
  }


  public void setCyclesInputModel(List<ProductCreateCycleRequestCyclesInputModelInner> cyclesInputModel) {
    
    
    
    this.cyclesInputModel = cyclesInputModel;
  }


  public ProductCreateCycleRequest addonPlanInputModels(List<ProductCreateCycleRequestAddonPlanInputModelsInner> addonPlanInputModels) {
    
    
    
    
    this.addonPlanInputModels = addonPlanInputModels;
    return this;
  }

  public ProductCreateCycleRequest addAddonPlanInputModelsItem(ProductCreateCycleRequestAddonPlanInputModelsInner addonPlanInputModelsItem) {
    this.addonPlanInputModels.add(addonPlanInputModelsItem);
    return this;
  }

   /**
   * Define attached add-ons
   * @return addonPlanInputModels
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Define attached add-ons")

  public List<ProductCreateCycleRequestAddonPlanInputModelsInner> getAddonPlanInputModels() {
    return addonPlanInputModels;
  }


  public void setAddonPlanInputModels(List<ProductCreateCycleRequestAddonPlanInputModelsInner> addonPlanInputModels) {
    
    
    
    this.addonPlanInputModels = addonPlanInputModels;
  }


  public ProductCreateCycleRequest allowancePlanInputModel(List<ProductCreateCycleRequestAllowancePlanInputModelInner> allowancePlanInputModel) {
    
    
    
    
    this.allowancePlanInputModel = allowancePlanInputModel;
    return this;
  }

  public ProductCreateCycleRequest addAllowancePlanInputModelItem(ProductCreateCycleRequestAllowancePlanInputModelInner allowancePlanInputModelItem) {
    if (this.allowancePlanInputModel == null) {
      this.allowancePlanInputModel = new ArrayList<>();
    }
    this.allowancePlanInputModel.add(allowancePlanInputModelItem);
    return this;
  }

   /**
   * Define attached allowances
   * @return allowancePlanInputModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Define attached allowances")

  public List<ProductCreateCycleRequestAllowancePlanInputModelInner> getAllowancePlanInputModel() {
    return allowancePlanInputModel;
  }


  public void setAllowancePlanInputModel(List<ProductCreateCycleRequestAllowancePlanInputModelInner> allowancePlanInputModel) {
    
    
    
    this.allowancePlanInputModel = allowancePlanInputModel;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProductCreateCycleRequest instance itself
   */
  public ProductCreateCycleRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductCreateCycleRequest productCreateCycleRequest = (ProductCreateCycleRequest) o;
    return Objects.equals(this.cyclesInputModel, productCreateCycleRequest.cyclesInputModel) &&
        Objects.equals(this.addonPlanInputModels, productCreateCycleRequest.addonPlanInputModels) &&
        Objects.equals(this.allowancePlanInputModel, productCreateCycleRequest.allowancePlanInputModel)&&
        Objects.equals(this.additionalProperties, productCreateCycleRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cyclesInputModel, addonPlanInputModels, allowancePlanInputModel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductCreateCycleRequest {\n");
    sb.append("    cyclesInputModel: ").append(toIndentedString(cyclesInputModel)).append("\n");
    sb.append("    addonPlanInputModels: ").append(toIndentedString(addonPlanInputModels)).append("\n");
    sb.append("    allowancePlanInputModel: ").append(toIndentedString(allowancePlanInputModel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cyclesInputModel");
    openapiFields.add("addonPlanInputModels");
    openapiFields.add("allowancePlanInputModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cyclesInputModel");
    openapiRequiredFields.add("addonPlanInputModels");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductCreateCycleRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductCreateCycleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductCreateCycleRequest is not found in the empty JSON string", ProductCreateCycleRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductCreateCycleRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("cyclesInputModel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cyclesInputModel` to be an array in the JSON string but got `%s`", jsonObj.get("cyclesInputModel").toString()));
      }

      JsonArray jsonArraycyclesInputModel = jsonObj.getAsJsonArray("cyclesInputModel");
      // validate the required field `cyclesInputModel` (array)
      for (int i = 0; i < jsonArraycyclesInputModel.size(); i++) {
        ProductCreateCycleRequestCyclesInputModelInner.validateJsonObject(jsonArraycyclesInputModel.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("addonPlanInputModels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addonPlanInputModels` to be an array in the JSON string but got `%s`", jsonObj.get("addonPlanInputModels").toString()));
      }

      JsonArray jsonArrayaddonPlanInputModels = jsonObj.getAsJsonArray("addonPlanInputModels");
      // validate the required field `addonPlanInputModels` (array)
      for (int i = 0; i < jsonArrayaddonPlanInputModels.size(); i++) {
        ProductCreateCycleRequestAddonPlanInputModelsInner.validateJsonObject(jsonArrayaddonPlanInputModels.get(i).getAsJsonObject());
      };
      if (jsonObj.get("allowancePlanInputModel") != null && !jsonObj.get("allowancePlanInputModel").isJsonNull()) {
        JsonArray jsonArrayallowancePlanInputModel = jsonObj.getAsJsonArray("allowancePlanInputModel");
        if (jsonArrayallowancePlanInputModel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowancePlanInputModel").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowancePlanInputModel` to be an array in the JSON string but got `%s`", jsonObj.get("allowancePlanInputModel").toString()));
          }

          // validate the optional field `allowancePlanInputModel` (array)
          for (int i = 0; i < jsonArrayallowancePlanInputModel.size(); i++) {
            ProductCreateCycleRequestAllowancePlanInputModelInner.validateJsonObject(jsonArrayallowancePlanInputModel.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductCreateCycleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductCreateCycleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductCreateCycleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductCreateCycleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductCreateCycleRequest>() {
           @Override
           public void write(JsonWriter out, ProductCreateCycleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductCreateCycleRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProductCreateCycleRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductCreateCycleRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductCreateCycleRequest
  * @throws IOException if the JSON string is invalid with respect to ProductCreateCycleRequest
  */
  public static ProductCreateCycleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductCreateCycleRequest.class);
  }

 /**
  * Convert an instance of ProductCreateCycleRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

